{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Software engineer, trilingual, open-source enthusiast, cloud lover, and writer. \ud83d\ude0a","text":"Quote.txt<pre><code>\"Let's write!\"\n</code></pre>"},{"location":"#hello","title":"Hello!","text":"<p>Hey there, it's Henry! I'm a software engineer doing my thing in Taiwan. Take a peek at my blog \u2013 it's a mishmash of stuff like what I'm currently cooking up in my projects, some handy tutorials, and my quirky DIY hobbies. I also use it to note down things I might forget later. It's all pretty random, let's write! \u270d</p>"},{"location":"#some-random-facts-about-me","title":"Some random facts about me","text":"<ul> <li>Took a break from Facebook for years \u2013 just wasn't my scene.</li> <li>Started off training as an electronics engineer but ended up making a living as a software engineer.</li> <li>Spent a solid three years as a college teacher before diving into the world of development.</li> <li>Big fan of all kinds of birds, but parrots hold a special place in my heart.</li> <li>Strategy games are totally my thing, and right now, I'm deep into AOE4! \ud83c\udfae</li> </ul>"},{"location":"#connecting","title":"Connecting","text":"<p>Feel free to reach out to me athieubkhcm@gmail.com to say Hi! \u4f60\u597d! or Xin ch\u00e0o! I'm always happy to make new friends.</p>"},{"location":"#my-github","title":"My Github","text":""},{"location":"#my-linkedin","title":"My Linkedin","text":""},{"location":"C%2B%2B/TuHocCpp0a696932184a476cb95c215fa83ac421/","title":"T\u1ef1 h\u1ecdc C++ (d\u1ecbch t\u1eeb ti\u1ebfng Hoa)","text":"<p>B\u00e0i b\u00e1o n\u00e0y c\u1ee7a m\u1ed9t t\u00e1c gi\u1ea3 ng\u01b0\u1eddi \u0110\u00e0i Loan vi\u1ebft, b\u1ea3n th\u00e2n m\u00ecnh th\u1ea5y r\u1ea5t chi ti\u1ebft v\u00e0 c\u00f3 th\u1ec3 d\u00f9ng nh\u01b0 m\u1ed9t c\u00e1ch \u0111\u1ec3 \u0111\u1ecbnh h\u01b0\u1edbng h\u1ecdc ng\u00f4n ng\u1eef C++ n\u00ean m\u00ecnh \u0111\u00e3 d\u1ecbch l\u1ea1i \u0111\u1ec3 \u0111\u1ecdc khi c\u1ea7n.</p> <p></p> <p>B\u00e0i vi\u1ebft g\u1ed1c c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c t\u00ecm \u1edf \u0111\u00e2y </p>"},{"location":"C%2B%2B/TuHocCpp0a696932184a476cb95c215fa83ac421/#gan-ay-toi-thuong-uoc-hoi-ve-cach-hoc-c","title":"G\u1ea7n \u0111\u00e2y, t\u00f4i th\u01b0\u1eddng \u0111\u01b0\u1ee3c h\u1ecfi v\u1ec1 c\u00e1ch h\u1ecdc C++.","text":"<p>V\u00e0o n\u0103m 2005, t\u00f4i \u0111\u00e3 chia s\u1ebb qu\u00e1 tr\u00ecnh \u0111\u1ecdc s\u00e1ch v\u1ec1 C++ tr\u00ean di\u1ec5n \u0111\u00e0n to\u00e0n qu\u1ed1c c\u1ee7a BBS, m\u1ed9t c\u1ed9ng \u0111\u1ed3ng trao \u0111\u1ed5i ki\u1ebfn th\u1ee9c v\u1ec1 l\u1eadp tr\u00ecnh. Tuy nhi\u00ean, sau m\u1ed9t th\u1eddi gian, b\u00e0i vi\u1ebft \u0111\u00f3 \u0111\u00e3 bi\u1ebfn m\u1ea5t, nh\u01b0ng t\u00f4i may m\u1eafn v\u1eabn gi\u1eef \u0111\u01b0\u1ee3c b\u1ee9c \u1ea3nh c\u1ee7a n\u00f3.</p> <p></p> <p>C\u00f3 l\u1ebd m\u1ed9t s\u1ed1 ng\u01b0\u1eddi \u0111\u00e3 t\u1eebng \u0111\u1ecdc qua nh\u1eefng \u0111i\u1ec1u n\u00e0y, nh\u01b0ng v\u1edbi s\u1ef1 xu\u1ea5t hi\u1ec7n c\u1ee7a C++11, s\u1ef1 r\u00fat lui c\u1ee7a H\u1ea7u C\u1ea3nh trong c\u1ed9ng \u0111\u1ed3ng d\u1ecbch ti\u1ebfng Trung ph\u1ed3n th\u1ec3 v\u00e0 s\u1ef1 r\u00fat lui c\u1ee7a Scott Meyers kh\u1ecfi th\u1ebf gi\u1edbi xu\u1ea5t b\u1ea3n C++, h\u1ea7u h\u1ebft nh\u1eefng cu\u1ed1n s\u00e1ch n\u00e0y \u0111\u00e3 tr\u1edf n\u00ean l\u1ed7i th\u1eddi v\u00e0 h\u1ea7u h\u1ebft c\u00e1c b\u1ea3n d\u1ecbch c\u0169ng \u0111\u00e3 ng\u1eebng ph\u00e1t h\u00e0nh. B\u1ee9c \u1ea3nh n\u00e0y c\u0169ng kh\u00f4ng c\u00f2n ph\u00f9 h\u1ee3p v\u00e0o ng\u00e0y h\u00f4m nay n\u0103m 2022. Nh\u01b0ng t\u00f4i \u0111\u00e3 l\u1edbn l\u00ean trong m\u1ed9t m\u00f4i tr\u01b0\u1eddng h\u1ecdc t\u1eadp nh\u01b0 v\u1eady, v\u00ec v\u1eady t\u00f4i c\u0169ng kh\u00f4ng th\u1ec3 cung c\u1ea5p m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p h\u1ecdc C++ m\u1edbi trong n\u0103m 2022. D\u00f9 hai quy\u1ec3n s\u00e1ch c\u01a1 b\u1ea3n v\u1ec1 C++ khi \u0111\u00f3, The C++ Programming Language v\u00e0 C++ Primer, \u0111\u00e3 \u0111\u01b0\u1ee3c thay th\u1ebf b\u1eb1ng phi\u00ean b\u1ea3n m\u1edbi nh\u1ea5t hi\u1ec7n nay, The C++ Programming Language 4/e (b\u1ea3n d\u1ecbch ti\u1ebfng Trung) v\u00e0 C++ Primer 5/e (b\u1ea3n d\u1ecbch ti\u1ebfng Trung), ch\u00fang c\u0169ng \u0111\u00e3 tr\u1edf n\u00ean l\u1ed7i th\u1eddi, v\u00e0 vi\u1ec7c \u0111\u1ecdc k\u1ef9 hai quy\u1ec3n s\u00e1ch n\u00e0y kh\u00f4ng \u0111\u1ee7 \u0111\u1ec3 hi\u1ec3u h\u1ebft ki\u1ebfn th\u1ee9c c\u01a1 b\u1ea3n v\u1ec1 C++. Th\u1eadt l\u00f2ng m\u00e0 n\u00f3i, t\u1eeb n\u0103m 2011 tr\u1edf \u0111i, t\u00f4i c\u0169ng kh\u00f4ng bi\u1ebft ph\u1ea3i d\u1ea1y m\u1ed9t ng\u01b0\u1eddi m\u1edbi h\u1ecdc C++ nh\u01b0 th\u1ebf n\u00e0o. V\u00ec v\u1eady, t\u00f4i xin l\u1ed7i, t\u00f4i c\u0169ng kh\u00f4ng th\u1ec3 gi\u00fap \u0111\u01b0\u1ee3c g\u00ec nhi\u1ec1u, \u0111\u00e2y ch\u1ec9 l\u00e0 m\u1ed9t b\u00e0i vi\u1ebft v\u00f4 \u00edch. Tuy nhi\u00ean, v\u00ec \u0111\u00e3 vi\u1ebft b\u00e0i v\u00e0o th\u1eddi \u0111i\u1ec3m \u0111\u00f3, v\u1ec1 m\u1eb7t \u0111\u1ea1o \u0111\u1ee9c, t\u00f4i c\u0169ng c\u1ea7n ph\u1ea3i gi\u1ea3i th\u00edch \u1edf \u0111\u00e2y m\u1ed9t ch\u00fat.</p> <p>Nh\u01b0 \u0111\u00e3 \u0111\u1ec1 c\u1eadp tr\u01b0\u1edbc \u0111\u00f3, b\u1ee9c \u1ea3nh ch\u1ec9 l\u00e0 t\u1eadp h\u1ee3p c\u00e1c s\u00e1ch v\u1ec1 C++ m\u00e0 t\u00f4i \u0111\u00e3 \u0111\u1ecdc v\u00e0o n\u0103m 2005, khi t\u00f4i c\u00f2n l\u00e0 sinh vi\u00ean n\u0103m nh\u1ea5t. \u0110i\u1ec1u n\u00e0y kh\u00f4ng c\u00f3 ngh\u0129a l\u00e0 b\u1ea1n c\u1ea7n ph\u1ea3i \u0111\u1ecdc nhi\u1ec1u s\u00e1ch \u0111\u1ec3 hi\u1ec3u v\u1ec1 C++ c\u01a1 b\u1ea3n. N\u1ebfu b\u1ea1n d\u00e0nh th\u1eddi gian v\u00e0o n\u0103m 2022 \u0111\u1ec3 \u0111\u1ecdc t\u1eebng quy\u1ec3n theo c\u00e1ch truy\u1ec1n th\u1ed1ng, b\u1ea1n s\u1ebd g\u1eb7p kh\u00f3 kh\u0103n. Tr\u01b0\u1edbc h\u1ebft, b\u1ea1n c\u1ea7n t\u00ecm ki\u1ebfm c\u00e1c b\u1ea3n d\u1ecbch ti\u1ebfng Trung c\u0169ng nh\u01b0 s\u00e1ch g\u1ed1c \u0111\u00e3 ng\u1eebng xu\u1ea5t b\u1ea3n; tuy nhi\u00ean, \u0111\u1ecdc s\u00e1ch g\u1ed1c c\u0169ng l\u00e0 m\u1ed9t l\u1ef1a ch\u1ecdn. N\u1ebfu b\u1ea1n m\u1edbi b\u1eaft \u0111\u1ea7u h\u1ecdc C++, sau khi \u0111\u00e3 t\u00ecm hi\u1ec3u v\u1ec1 c\u00e1c t\u00ednh n\u0103ng ng\u00f4n ng\u1eef trong C++20, vi\u1ec7c \u0111\u1ecdc c\u00e1c s\u00e1ch c\u0169 c\u00f3 th\u1ec3 g\u00e2y nh\u1ea7m l\u1eabn v\u00ec m\u1ed9t s\u1ed1 v\u1ea5n \u0111\u1ec1 \u0111\u00e3 \u0111\u01b0\u1ee3c gi\u1ea3i quy\u1ebft tr\u1ef1c ti\u1ebfp b\u1eb1ng c\u00e1c c\u01a1 ch\u1ebf m\u1edbi sau C++11, ho\u1eb7c c\u00e1ch gi\u1ea3i quy\u1ebft \u0111\u00e3 tr\u1edf n\u00ean \u0111\u01a1n gi\u1ea3n h\u01a1n. T\u00f3m l\u1ea1i, nh\u01b0 t\u00f4i \u0111\u00e3 vi\u1ebft trong b\u00e0i b\u00e1o \u0111\u00f3, n\u0103m 2022 \u0111\u00f2i h\u1ecfi m\u1ed9t s\u1ed1 \u0111i\u1ec1u b\u1ed5 sung.</p> <p>Tr\u01b0\u1edbc h\u1ebft, khi n\u00f3i v\u1ec1 C++ Primer, t\u00f4i nh\u1ea5n m\u1ea1nh v\u1ec1 phi\u00ean b\u1ea3n th\u1ee9 ba c\u1ee7a n\u00f3. Tuy nhi\u00ean, c\u00e1ch vi\u1ebft t\u1eeb phi\u00ean b\u1ea3n th\u1ee9 t\u01b0 c\u1ee7a C++ Primer \u0111\u00e3 m\u1ea5t \u0111i s\u1ef1 to\u00e0n di\u1ec7n v\u00e0 s\u1ee9c m\u1ea1nh ban \u0111\u1ea7u. C++ Primer 3/e ban \u0111\u1ea7u l\u00e0 m\u1ed9t t\u00e0i li\u1ec7u \u0111\u1ea7y \u0111\u1ee7 v\u1ec1 C++, gi\u00fap \u0111\u1ed9c gi\u1ea3 hi\u1ec3u s\u00e2u v\u1ec1 ng\u00f4n ng\u1eef n\u00e0y v\u00e0 d\u1ec5 d\u00e0ng x\u1eed l\u00fd c\u00e1c l\u1ed7i t\u1eeb tr\u00ecnh bi\u00ean d\u1ecbch. Th\u1eadm ch\u00ed n\u1ebfu qu\u00ean m\u1ed9t s\u1ed1 \u0111i\u1ec1u, \u0111\u1ed9c gi\u1ea3 c\u0169ng nhanh ch\u00f3ng nh\u1edb l\u1ea1i c\u00e1c quy t\u1eafc v\u00e0 s\u1eeda l\u1ed7i m\u1ed9t c\u00e1ch hi\u1ec7u qu\u1ea3. \u0110\u00f3 l\u00e0 s\u1ee9c m\u1ea1nh c\u1ee7a C++ Primer 3/e. Tuy nhi\u00ean, t\u00e1c gi\u1ea3 c\u00f3 l\u1ebd h\u1ed1i h\u1eadn v\u1ec1 vi\u1ec7c vi\u1ebft m\u1ed9t cu\u1ed1n s\u00e1ch ph\u1ee9c t\u1ea1p nh\u01b0 v\u1eady, g\u00e2y kh\u00f3 kh\u0103n cho ng\u01b0\u1eddi \u0111\u1ecdc. Sau \u0111\u00f3, Essential C++ ra \u0111\u1eddi v\u1edbi m\u1ee5c ti\u00eau l\u00e0m cho vi\u1ec7c h\u1ecdc C++ d\u1ec5 d\u00e0ng h\u01a1n, nh\u01b0ng \u0111\u1ed1i v\u1edbi t\u00f4i, cu\u1ed1n s\u00e1ch n\u00e0y kh\u00f4ng \u0111\u00e1ng gi\u00e1. M\u1eb7c d\u00f9 mua v\u1edbi m\u1ee5c \u0111\u00edch gi\u1ea3ng d\u1ea1y, n\u00f3 kh\u00f4ng mang l\u1ea1i gi\u00e1 tr\u1ecb g\u00ec \u0111\u00e1ng k\u1ec3. V\u00e0o th\u1eddi \u0111i\u1ec3m \u0111\u00f3, \u0111\u1ecdc Essential C++ kh\u00f4ng kh\u00e1c g\u00ec \u0111\u1ecdc C++ How to Program, m\u1ed9t cu\u1ed1n \u0111\u01b0\u1ee3c nhi\u1ec1u ng\u01b0\u1eddi khuy\u00ean \u0111\u1ecdc. T\u1eeb phi\u00ean b\u1ea3n C++ Primer 4/e tr\u1edf \u0111i, t\u00e1c gi\u1ea3 \u0111\u00e3 thay \u0111\u1ed5i nhi\u1ec1u, lo\u1ea1i b\u1ecf nhi\u1ec1u ch\u01b0\u01a1ng kh\u00f3 hi\u1ec3u tr\u1ef1c ti\u1ebfp, nh\u01b0ng phi\u00ean b\u1ea3n 5/e d\u01b0\u1eddng nh\u01b0 ch\u1ec9 l\u00e0 m\u1ed9t b\u1ea3n v\u00e1 cho C++11. Th\u1eadt s\u1ef1, t\u00f4i kh\u00f4ng th\u1ea5y vi\u1ec7c \u0111\u1ecdc n\u00f3 c\u00f2n \u00fd ngh\u0129a. S\u1ef1 to\u00e0n di\u1ec7n \u0111\u00e3 kh\u00f4ng c\u00f2n nh\u01b0 tr\u01b0\u1edbc, v\u00e0 vi\u1ec7c \u0111\u1ecdc h\u1ebft n\u00f3 kh\u00f4ng c\u00f2n \u0111\u00e1ng gi\u00e1 nh\u01b0 tr\u01b0\u1edbc. M\u1ed9t c\u00e1ch n\u00e0o \u0111\u00f3, t\u00f4i ngh\u0129 c\u00e1c cu\u1ed1n s\u00e1ch c\u1ee7a Lippman kh\u00f4ng c\u00f2n c\u1ea7n thi\u1ebft ph\u1ea3i \u0111\u1ecdc n\u1eefa, d\u00f9 \u00f4ng ta kh\u00f4ng vi\u1ebft th\u00eam s\u00e1ch m\u1edbi.</p> <p>So v\u1edbi C++ Primer, cu\u1ed1n The C++ Programming Language c\u1ee7a Bjarne Stroustrup, \"\u00f4ng gi\u00e0\" c\u1ee7a C++, v\u1eabn l\u00e0 l\u1ef1a ch\u1ecdn \u0111\u00e1ng \u0111\u1ecdc h\u01a1n. B\u1edfi v\u00ec C++ l\u00e0 ng\u00f4n ng\u1eef m\u00e0 \u00f4ng \u0111\u00e3 t\u1ea1o ra, \u00f4ng hi\u1ec3u r\u00f5 m\u1ed7i c\u01a1 ch\u1ebf c\u1ee7a C++, c\u0169ng nh\u01b0 l\u00fd do t\u1ea1i sao ch\u00fang \u0111\u01b0\u1ee3c th\u00eam v\u00e0o. S\u00e1ch c\u1ee7a \u00f4ng \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp m\u1ed9t c\u00e1ch c\u00f3 \u00fd ngh\u0129a l\u1ecbch s\u1eed, gi\u00fap \u0111\u1ed9c gi\u1ea3 hi\u1ec3u v\u1ec1 b\u1ea3n ch\u1ea5t c\u1ee7a C++ theo c\u00e1ch c\u1ed5 \u0111i\u1ec3n nh\u1ea5t. N\u1ebfu b\u1ea1n quan t\u00e2m \u0111\u1ebfn l\u1ecbch s\u1eed c\u1ee7a c\u00e1c c\u01a1 ch\u1ebf ng\u00f4n ng\u1eef trong C++98, The Design and Evolution of C++ l\u00e0 m\u1ed9t t\u00e0i li\u1ec7u quan tr\u1ecdng. Tuy nhi\u00ean, vi\u1ec7c \u0111\u1ecdc nhi\u1ec1u s\u00e1ch n\u00e0y v\u00e0o n\u0103m 2022 kh\u00f4ng \u0111\u01b0\u1ee3c \u0111\u1ec1 xu\u1ea5t, v\u00ec sau C++11, s\u00e1ch n\u00e0y kh\u00f4ng c\u00f2n \u0111\u01b0\u1ee3c coi tr\u1ecdng nh\u01b0 tr\u01b0\u1edbc. C++ c\u0169ng kh\u00f4ng c\u00f2n l\u00e0 \"\u0111\u1ee9a con\" c\u1ee7a Bjarne Stroustrup sau nhi\u1ec1u s\u1ef1 can thi\u1ec7p t\u1eeb \u1ee7y ban ti\u00eau chu\u1ea9n. M\u1eb7c d\u00f9 c\u00f3 nh\u1eefng kh\u00e1c bi\u1ec7t trong quan \u0111i\u1ec3m gi\u1eefa \u00f4ng v\u00e0 C++98, vi\u1ec7c \u0111\u1ecdc cu\u1ed1n s\u00e1ch n\u00e0y v\u1eabn c\u00f3 gi\u00e1 tr\u1ecb, \u0111\u1eb7c bi\u1ec7t n\u1ebfu b\u1ea1n mu\u1ed1n hi\u1ec3u r\u00f5 \u00fd \u0111\u1ecbnh ban \u0111\u1ea7u c\u1ee7a \"\u00f4ng gi\u00e0\" v\u1ec1 C++ v\u00e0 tr\u00e1nh sai l\u1ea7m khi s\u1eed d\u1ee5ng c\u00e1c c\u01a1 ch\u1ebf ng\u00f4n ng\u1eef trong C++98.</p> <p>Phi\u00ean b\u1ea3n d\u1ecbch ti\u1ebfng Trung c\u1ee7a cu\u1ed1n Inside the C++ Object Model (\u6df1\u5ea6\u63a2\u7d22 C++ \u7269\u4ef6\u6a21\u578b) \u0111\u00e3 ng\u1eebng ph\u00e1t h\u00e0nh t\u1eeb l\u00e2u, v\u00e0 th\u1ef1c t\u1ebf, s\u00e1ch g\u1ed1c c\u0169ng c\u00f3 nhi\u1ec1u v\u1ea5n \u0111\u1ec1 c\u1ea7n ph\u1ea3i s\u1eeda \u0111\u1ed5i. Phi\u00ean b\u1ea3n d\u1ecbch n\u00e0y do H\u1ea7u C\u1ea3nh th\u1ef1c hi\u1ec7n \u0111\u00e3 ch\u1ec9nh s\u1eeda nhi\u1ec1u l\u1ed7i trong s\u00e1ch g\u1ed1c. Tuy nhi\u00ean, v\u00e0o n\u0103m 2022, kh\u00f4ng c\u1ea7n thi\u1ebft ph\u1ea3i \u0111\u1ecdc s\u00e1ch n\u00e0y nhi\u1ec1u \u0111\u1ec3 hi\u1ec3u v\u1ec1 vtable v\u00e0 c\u1ea5u tr\u00fac b\u1ed9 nh\u1edb c\u1ee7a \u0111\u1ed1i t\u01b0\u1ee3ng. B\u1ea1n c\u00f3 th\u1ec3 t\u00ecm ki\u1ebfm tr\u00ean Google \u0111\u1ec3 t\u00ecm th\u00f4ng tin v\u1ec1 ch\u1ee7 \u0111\u1ec1 n\u00e0y, v\u1edbi n\u1ed9i dung ph\u00f9 h\u1ee3p v\u1edbi th\u1eddi \u0111\u1ea1i hi\u1ec7n \u0111\u1ea1i h\u01a1n. Th\u1ef1c s\u1ef1, kh\u00f4ng c\u1ea7n ph\u00ed th\u1eddi gian \u0111\u1ecdc cu\u1ed1n s\u00e1ch m\u00e0 Lippman vi\u1ebft v\u00e0o th\u1eddi \u0111i\u1ec3m \u0111\u00f3.</p> <p>C\u00e1c cu\u1ed1n s\u00e1ch trong series Effective \u0111\u01b0\u1ee3c vi\u1ebft b\u1edfi Scott Meyers, v\u00e0 series Exceptional \u0111\u01b0\u1ee3c vi\u1ebft b\u1edfi Herb Sutter, m\u1ed9t ng\u01b0\u1eddi ho\u1ea1t \u0111\u1ed9ng t\u00edch c\u1ef1c trong c\u1ed9ng \u0111\u1ed3ng C++ cho \u0111\u1ebfn ng\u00e0y nay. Nh\u1eefng cu\u1ed1n s\u00e1ch n\u00e0y t\u1ed5ng h\u1ee3p nh\u1eefng \u00fd ki\u1ebfn hay nh\u1ea5t t\u1eeb c\u00e1c di\u1ec5n \u0111\u00e0n tr\u00ean Internet v\u00e0o th\u1eddi \u0111i\u1ec3m \u0111\u00f3, ch\u1ee9a \u0111\u1ef1ng nhi\u1ec1u v\u1ea5n \u0111\u1ec1 kh\u00f3 kh\u0103n v\u00e0 c\u1ea1m b\u1eaby m\u00e0 ng\u01b0\u1eddi l\u00e0m vi\u1ec7c v\u1edbi C++ c\u00f3 th\u1ec3 g\u1eb7p ph\u1ea3i trong th\u1ef1c t\u1ebf. \u0110\u1ecdc series s\u00e1ch n\u00e0y tr\u01b0\u1edbc khi b\u1eaft \u0111\u1ea7u th\u1ef1c s\u1ef1 l\u00e0m vi\u1ec7c c\u00f3 th\u1ec3 gi\u00fap tr\u00e1nh xa nh\u1eefng l\u1ed7i m\u00e0 ng\u01b0\u1eddi \u0111i tr\u01b0\u1edbc \u0111\u00e3 g\u1eb7p ph\u1ea3i.</p> <p>Tuy nhi\u00ean, c\u00e1c cu\u1ed1n s\u00e1ch trong series Effective v\u00e0 Exceptional \u0111\u00e3 l\u1ed7i th\u1eddi, v\u00e0 n\u1ebfu ng\u01b0\u1eddi kh\u00f4ng hi\u1ec3u s\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa C++11 v\u00e0 C++98 m\u00e0 \u0111\u1ecdc nh\u1eefng cu\u1ed1n n\u00e0y, c\u00f3 th\u1ec3 h\u1ecd s\u1ebd s\u1eed d\u1ee5ng c\u00e1c c\u01a1 ch\u1ebf c\u0169 trong s\u00e1ch \u0111\u1ec3 gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 thay v\u00ec s\u1eed d\u1ee5ng c\u00e1c c\u01a1 ch\u1ebf ng\u00f4n ng\u1eef m\u00e0 C++11 v\u00e0 C++20 cung c\u1ea5p.</p> <p>M\u1eb7c d\u00f9 sau khi C++11 ra \u0111\u1eddi kh\u00f4ng c\u00f3 b\u1ed9 s\u00e1ch n\u00e0o kh\u00e1c \u0111\u01b0\u1ee3c xu\u1ea5t b\u1ea3n tr\u00ean th\u1ebf gi\u1edbi c\u00f3 s\u1ef1 ho\u00e0n ch\u1ec9nh nh\u01b0 v\u1eady, v\u00e0o n\u0103m 2022, vi\u1ec7c quy\u1ebft \u0111\u1ecbnh li\u1ec7u ng\u01b0\u1eddi m\u1edbi h\u1ecdc C++ \u0111\u00e3 \u0111\u1ecdc xong C++ Primer ho\u1eb7c The C++ Programming Language c\u00f3 n\u00ean \u0111\u1ecdc series s\u00e1ch n\u00e0y hay kh\u00f4ng v\u1eabn l\u00e0 m\u1ed9t quy\u1ebft \u0111\u1ecbnh kh\u00f3 kh\u0103n.</p> <p>Tuy nhi\u00ean, c\u00f3 th\u1ec3 kh\u1eb3ng \u0111\u1ecbnh r\u1eb1ng, cu\u1ed1n Effective C++ 3/e \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt v\u00e0o n\u0103m 2005 v\u1eabn cung c\u1ea5p n\u1ed9i dung h\u1eefu \u00edch \u0111\u1ed1i v\u1edbi C++ hi\u1ec7n \u0111\u1ea1i. M\u1eb7c d\u00f9 cu\u1ed1n Effective STL \u0111\u00e3 xu\u1ea5t hi\u1ec7n t\u1eeb n\u0103m 2001, nh\u01b0ng b\u1ea3n ch\u1ea5t c\u1ee7a STL th\u1ef1c s\u1ef1 kh\u00f4ng thay \u0111\u1ed5i, v\u00ec v\u1eady l\u1ee3i \u00edch t\u1eeb vi\u1ec7c \u0111\u1ecdc n\u00f3 c\u0169ng kh\u00f4ng gi\u1ea3m \u0111i qu\u00e1 nhi\u1ec1u. Cu\u1ed1n s\u00e1ch cu\u1ed1i c\u00f9ng c\u1ee7a Scott Meyers trong c\u1ed9ng \u0111\u1ed3ng C++ l\u00e0 Effective Modern C++ (b\u1ea3n d\u1ecbch ti\u1ebfng Trung), \u0111\u01b0\u1ee3c xu\u1ea5t b\u1ea3n v\u00e0o n\u0103m 2014, c\u00f3 th\u1ec3 n\u00f3i l\u00e0 m\u1ed9t trong nh\u1eefng cu\u1ed1n s\u00e1ch c\u1ea7n \u0111\u1ecdc, v\u00e0 v\u00e0o n\u0103m 2022, gi\u00e1 tr\u1ecb c\u1ee7a n\u00f3 v\u1eabn kh\u00f4ng thay \u0111\u1ed5i.</p> <p>Sau \u0111\u00f3, Scott Meyers \u0111\u00e3 r\u1eddi kh\u1ecfi s\u00e2n kh\u1ea5u C++ v\u1edbi m\u1ed9t b\u00e0i vi\u1ebft tr\u00ean trang web c\u1ee7a m\u00ecnh. Cu\u1ed1i c\u00f9ng, h\u01b0\u1edbng d\u1eabn cu\u1ed1i c\u00f9ng m\u00e0 anh \u1ea5y \u0111\u01b0a ra l\u00e0 h\u00e3y \u0111\u1ecdc C++ Core Guidelines trong t\u01b0\u01a1ng lai. M\u1eb7c d\u00f9 n\u1ed9i dung c\u1ee7a C++ Core Guidelines kh\u00e1 kh\u00f3 ti\u1ebfp c\u1eadn, nh\u01b0ng kh\u00f4ng th\u1ec3 ph\u1ee7 nh\u1eadn r\u1eb1ng n\u00f3 lu\u00f4n \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt. Do \u0111\u00f3, c\u00f3 th\u1ec3 n\u00f3i l\u00e0 kh\u00f4ng \u0111\u1ecdc c\u0169ng kh\u00f4ng \u0111\u01b0\u1ee3c.</p> <p>Th\u1ef1c ra, t\u1eeb tr\u01b0\u1edbc \u0111\u1ebfn nay, nh\u1eadn \u0111\u1ecbnh duy nh\u1ea5t c\u1ee7a t\u00f4i v\u1ec1 series Exceptional do Herb Sutter vi\u1ebft l\u00e0 kh\u00f4ng n\u00ean s\u1eed d\u1ee5ng exception trong C++, v\u00ec vi\u1ec7c \u0111\u1ea1t \u0111\u01b0\u1ee3c exception-safe m\u00e0 anh \u1ea5y khuy\u1ebfn kh\u00edch trong th\u1ef1c t\u1ebf l\u00e0 g\u1ea7n nh\u01b0 kh\u00f4ng th\u1ec3, tr\u1eeb khi d\u1ef1 \u00e1n c\u1ee7a b\u1ea1n kh\u00f4ng s\u1eed d\u1ee5ng b\u1ea5t k\u1ef3 th\u01b0 vi\u1ec7n b\u00ean th\u1ee9 ba n\u00e0o. M\u1eb7c d\u00f9 c\u00f3 \u0111i\u1ec1u n\u00e0y kh\u00f4ng t\u1ed1t cho t\u00e1c gi\u1ea3, nh\u01b0ng \u00fd ki\u1ebfn c\u1ee7a t\u00f4i sau khi \u0111\u1ecdc n\u00f3 th\u1ef1c s\u1ef1 ch\u1ec9 c\u00f3 v\u1eady.</p> <p>Tuy nhi\u00ean, ngo\u00e0i c\u00e1c ch\u01b0\u01a1ng n\u00f3i v\u1ec1 exception, th\u1ef1c t\u1ebf series s\u00e1ch n\u00e0y v\u1eabn c\u00f2n nhi\u1ec1u n\u1ed9i dung \u0111\u00e1ng \u0111\u1ecdc, ngay c\u1ea3 v\u00e0o n\u0103m 2022, v\u1eabn r\u1ea5t h\u1eefu \u00edch, v\u00ec v\u1eady vi\u1ec7c \u0111\u1ecdc kh\u00f4ng c\u00f3 g\u00ec l\u00e0m h\u1ea1i. Ngo\u00e0i ra, c\u1ea3 hai cu\u1ed1n s\u00e1ch \u0111\u1ec1u \u0111\u01b0\u1ee3c t\u00e1c gi\u1ea3 t\u1ed5ng h\u1ee3p t\u1eeb Guru of the Week (GotW), nh\u01b0ng ch\u1ec9 thu th\u1eadp \u0111\u1ebfn s\u1ed1 ph\u00e1t h\u00e0nh #62, v\u00ec v\u1eady b\u1ea1n ph\u1ea3i t\u1ef1 truy c\u1eadp trang web \u0111\u1ec3 xem c\u00e1c s\u1ed1 ph\u00e1t h\u00e0nh t\u1eeb #63 tr\u1edf \u0111i.</p> <p>Tuy nhi\u00ean, \u0111i\u1ec1u n\u00e0y kh\u00f4ng c\u00f3 ngh\u0129a l\u00e0 b\u1ea1n kh\u00f4ng c\u1ea7n \u0111\u1ecdc c\u00e1c ph\u1ea7n tr\u01b0\u1edbc s\u1ed1 ph\u00e1t h\u00e0nh #63, v\u00ec t\u00e1c gi\u1ea3 \u0111\u00e3 th\u1ef1c hi\u1ec7n m\u1ed9t s\u1ed1 c\u1eadp nh\u1eadt nh\u1ecf v\u1ec1 C++14 t\u1eeb n\u0103m 2013, nh\u01b0ng ch\u1ec9 \u0111\u0103ng tr\u00ean blog c\u00e1 nh\u00e2n c\u1ee7a anh \u1ea5y. Tr\u00ean blog n\u00e0y, anh \u1ea5y v\u1eabn ti\u1ebfp t\u1ee5c \u0111\u0103ng c\u00e1c s\u1ed1 ph\u00e1t h\u00e0nh m\u1edbi, \u0111\u1ebfn th\u1eddi \u0111i\u1ec3m hi\u1ec7n t\u1ea1i \u0111\u00e3 vi\u1ebft \u0111\u1ebfn s\u1ed1 ph\u00e1t h\u00e0nh #102.</p> <p>M\u1ed9t m\u1eb7t kh\u00e1c, hai cu\u1ed1n s\u00e1ch c\u1ee7a anh \u1ea5y c\u00f3 th\u1ec3 kh\u00f4ng c\u1ea7n ph\u1ea3i mua \u0111\u1ec3 \u0111\u1ecdc, b\u1ea1n c\u00f3 th\u1ec3 tr\u1ef1c ti\u1ebfp \u0111\u1ecdc n\u1ed9i dung \u0111\u00e3 \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt t\u1eeb trang web. Ngo\u00e0i ra, c\u00f2n c\u00f3 m\u1ed9t cu\u1ed1n s\u00e1ch kh\u00e1c mang t\u00ean C++ Coding Standards c\u0169ng do anh \u1ea5y vi\u1ebft, nh\u01b0ng n\u1ed9i dung qu\u00e1 ng\u1eafn g\u1ecdn v\u00e0 kh\u00f4ng gi\u1ea3i th\u00edch chi ti\u1ebft l\u00fd do, gi\u00e1 tr\u1ecb \u0111\u1ecdc kh\u00f4ng \u0111\u00e1ng k\u1ec3 b\u1eb1ng series Effective v\u00e0 Exceptional. \u0110a s\u1ed1 \u0111\u00e3 \u0111\u1ecdc qua hai series s\u00e1ch n\u00e0y c\u0169ng \u0111\u00e3 \u0111\u1ecdc \u0111\u01b0\u1ee3c ph\u1ea7n l\u1edbn n\u1ed9i dung trong cu\u1ed1n s\u00e1ch n\u00e0y.</p> <p>Cu\u1ed1n s\u00e1ch Generic Programming and the STL (\u6cdb\u578b\u7a0b\u5f0f\u8a2d\u8a08\u8207 STL) th\u1ef1c s\u1ef1 l\u00e0 m\u1ed9t t\u00e0i li\u1ec7u t\u1ed1t \u0111\u1ec3 h\u1ecdc v\u1ec1 STL. \u0110\u1ebfn hi\u1ec7n t\u1ea1i, t\u00f4i v\u1eabn ch\u01b0a th\u1ea5y m\u1ed9t cu\u1ed1n s\u00e1ch n\u00e0o kh\u00e1c ph\u00f9 h\u1ee3p h\u01a1n \u0111\u1ec3 hi\u1ec3u v\u1ec1 STL, ngay c\u1ea3 khi vi\u1ec7c \u0111\u1ecdc cu\u1ed1n s\u00e1ch n\u00e0y \u0111\u00f2i h\u1ecfi m\u1ed9t ch\u00fat ki\u1ebfn th\u1ee9c v\u1ec1 to\u00e1n r\u1eddi r\u1ea1c. Cu\u1ed1n s\u00e1ch n\u00e0y gi\u00fap \u0111\u1ed9c gi\u1ea3 hi\u1ec3u v\u1ec1 c\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a STL t\u1eeb m\u1eb7t \u0111\u1ecbnh ngh\u0129a, gi\u00fap \u0111\u1ecdc gi\u1ea3 kh\u00f4ng b\u1ecb m\u1eafc k\u1eb9t v\u1edbi c\u00e1c thu\u1eadt ng\u1eef \u0111\u1eb7c bi\u1ec7t trong t\u00e0i li\u1ec7u STL. N\u00f3 c\u0169ng h\u1eefu \u00edch cho nh\u1eefng ng\u01b0\u1eddi mu\u1ed1n m\u1edf r\u1ed9ng STL theo c\u00e1ch c\u1ee7a ri\u00eang h\u1ecd. Tuy nhi\u00ean, gi\u00e1 tr\u1ecb c\u1ee7a cu\u1ed1n s\u00e1ch n\u00e0y trong th\u1eddi k\u1ef3 Internet v\u00e0 c\u00f4ng c\u1ee5 t\u00ecm ki\u1ebfm ch\u01b0a ph\u00e1t tri\u1ec3n r\u1ed9ng r\u00e3i nh\u01b0 n\u0103m 1999 c\u00f3 th\u1ec3 \u0111\u00e1ng k\u1ec3, ng\u00e0y nay ch\u1ec9 c\u1ea7n d\u00e1n v\u00e0o Google l\u00e0 c\u00f3 th\u1ec3 t\u00ecm th\u1ea5y \u0111\u1ecbnh ngh\u0129a c\u00e1c thu\u1eadt ng\u1eef \u0111\u1eb7c bi\u1ec7t \u0111\u00f3. Tuy nhi\u00ean, n\u1ebfu mu\u1ed1n h\u1ecdc h\u1ec7 th\u1ed1ng t\u1eeb \u0111\u1ecbnh ngh\u0129a, cu\u1ed1n s\u00e1ch n\u00e0y v\u1eabn cung c\u1ea5p h\u01b0\u1edbng d\u1eabn t\u1ed1t cho ng\u01b0\u1eddi m\u1edbi b\u1eaft \u0111\u1ea7u.</p> <p>V\u1ec1 cu\u1ed1n s\u00e1ch STL Source Code Analysis c\u1ee7a Hou Jie, trong th\u1eddi \u0111\u1ea1i hi\u1ec7n \u0111\u1ea1i, ph\u1ea7n gi\u1edbi thi\u1ec7u v\u1ec1 s\u00e1u th\u00e0nh ph\u1ea7n STL v\u1eabn c\u00f2n gi\u00e1 tr\u1ecb, nh\u01b0ng ph\u1ea7n v\u1ec1 chi ti\u1ebft tri\u1ec3n khai c\u1ee7a STL c\u00f3 th\u1ec3 h\u1eefu \u00edch h\u01a1n \u0111\u1ed1i v\u1edbi sinh vi\u00ean \u0111\u1ea1i h\u1ecdc ch\u01b0a h\u1ecdc v\u1ec1 c\u1ea5u tr\u00fac d\u1eef li\u1ec7u. N\u1ebfu kh\u00f4ng th\u1ec3 c\u00f3 \u0111\u01b0\u1ee3c cu\u1ed1n s\u00e1ch n\u00e0y, th\u1ef1c s\u1ef1 c\u0169ng kh\u00f4ng c\u1ea7n ph\u1ea3i bu\u1ed3n, v\u00ec th\u1ef1c t\u1ebf, gi\u00e1 tr\u1ecb c\u1ee7a c\u00e1c t\u00e1c ph\u1ea9m c\u1ee7a Hou Jie ch\u1ee7 y\u1ebfu kh\u00f4ng cao b\u1eb1ng c\u00e1c t\u00e1c ph\u1ea9m d\u1ecbch c\u1ee7a anh \u1ea5y. N\u1ebfu kh\u00f4ng c\u00f3 c\u01a1 h\u1ed9i \u0111\u1ecdc cu\u1ed1n s\u00e1ch \u0111\u00f3, th\u00ec c\u0169ng kh\u00f4ng sao.</p> <p>Cu\u1ed1n s\u00e1ch The C++ Standard Library: A Tutorial and Reference v\u1eabn l\u00e0 m\u1ed9t t\u00e0i li\u1ec7u c\u1ea7n thi\u1ebft \u0111\u1ec3 h\u1ecdc c\u00e1ch s\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n chu\u1ea9n C++. D\u00f9 \u1edf b\u1ea5t k\u1ef3 th\u1eddi k\u1ef3 n\u00e0o, cu\u1ed1n s\u00e1ch n\u00e0y v\u1eabn l\u00e0 m\u1ed9t ngu\u1ed3n tham kh\u1ea3o quan tr\u1ecdng v\u00e0 c\u0169ng c\u00f3 vai tr\u00f2 nh\u01b0 m\u1ed9t cu\u1ed1n s\u00e1ch gi\u00e1o tr\u00ecnh. Tuy nhi\u00ean, trong th\u1eddi \u0111\u1ea1i hi\u1ec7n \u0111\u1ea1i, v\u1edbi s\u1ef1 xu\u1ea5t hi\u1ec7n c\u1ee7a hai trang web cppreference v\u00e0 The C++ Resources Network, cu\u1ed1n s\u00e1ch n\u00e0y kh\u00f4ng c\u00f2n \u0111\u00f3ng vai tr\u00f2 nh\u01b0 m\u1ed9t cu\u1ed1n s\u00e1ch tham kh\u1ea3o ch\u00ednh. T\u1eeb \u0111\u1ea7u, n\u00f3 kh\u00f4ng ph\u1ea3i l\u00e0 m\u1ed9t cu\u1ed1n s\u00e1ch d\u1ec5 tra c\u1ee9u, n\u00ean th\u01b0\u1eddng \u0111\u01b0\u1ee3c coi l\u00e0 m\u1ed9t cu\u1ed1n s\u00e1ch gi\u00e1o tr\u00ecnh \u0111\u1ec3 h\u1ecdc th\u01b0 vi\u1ec7n chu\u1ea9n.</p> <p>Tuy nhi\u00ean, khi h\u1ecdc v\u1ec1 STL, cu\u1ed1n s\u00e1ch n\u00e0y v\u1eabn kh\u00f4ng th\u1ec3 so s\u00e1nh \u0111\u01b0\u1ee3c v\u1edbi cu\u1ed1n s\u00e1ch Generic Programming and the STL, d\u00f9 \u0111\u00e3 l\u1ed7i th\u1eddi h\u01a1n 10 n\u0103m.</p> <p>T\u00e1c gi\u1ea3 c\u1ee7a cu\u1ed1n s\u00e1ch Modern C++ Design, Andrei Alexandrescu, \u0111\u01b0\u1ee3c coi l\u00e0 m\u1ed9t thi\u00ean t\u00e0i trong c\u1ed9ng \u0111\u1ed3ng C++, tuy nhi\u00ean th\u01b0 vi\u1ec7n Loki Library m\u00e0 \u00f4ng gi\u1edbi thi\u1ec7u \u0111\u00e3 kh\u00f4ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng r\u1ed9ng r\u00e3i b\u1edfi th\u1ebf h\u1ec7 sau. Th\u1ef1c t\u1ebf, cu\u1ed1n s\u00e1ch n\u00e0y, tr\u1eeb khi b\u1ea1n mu\u1ed1n tham gia v\u00e0o vi\u1ec7c thi\u1ebft k\u1ebf th\u01b0 vi\u1ec7n nh\u01b0 Boost C++ Libraries, kh\u00f4ng mang l\u1ea1i nhi\u1ec1u l\u1ee3i \u00edch cho vi\u1ec7c \u0111\u1ecdc. N\u1ebfu b\u1ea1n c\u00f3 th\u1eddi gian d\u01b0 d\u1ea3, vi\u1ec7c \u0111\u1ecdc v\u00e0 hi\u1ec3u cu\u1ed1n s\u00e1ch c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t th\u00e1ch th\u1ee9c, nh\u01b0ng sau khi ho\u00e0n th\u00e0nh, n\u1ebfu kh\u00f4ng l\u00e0m vi\u1ec7c li\u00ean quan, b\u1ea1n ch\u1ec9 c\u00f3 \u0111\u01b0\u1ee3c m\u1ed9t c\u1ea3m gi\u00e1c t\u1ef1 m\u00e3n. Trong qu\u00e1 kh\u1ee9, c\u00f3 th\u1ec3 m\u1ed9t s\u1ed1 ng\u01b0\u1eddi s\u1ebd khen ng\u1ee3i b\u1ea1n sau khi \u0111\u1ecdc xong, nh\u01b0ng v\u00e0o n\u0103m 2022, khi \u00edt ng\u01b0\u1eddi quan t\u00e2m \u0111\u1ebfn C++, vi\u1ec7c \u0111\u1ecdc cu\u1ed1n s\u00e1ch n\u00e0y c\u00f3 th\u1ec3 ch\u1ec9 \u0111\u1ec3 th\u1ecfa m\u00e3n l\u00f2ng t\u1ef1 tr\u1ecdng c\u00e1 nh\u00e2n.</p> <p>Thay v\u00ec d\u00e0nh nhi\u1ec1u th\u1eddi gian \u0111\u1ec3 \u0111\u1ecdc cu\u1ed1n s\u00e1ch n\u00e0y, b\u1ea1n c\u00f3 th\u1ec3 h\u1ecdc th\u00eam m\u1ed9t s\u1ed1 ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh kh\u00e1c h\u1eefu \u00edch nh\u01b0 Python ho\u1eb7c Go. \u0110\u00f3 l\u00e0 l\u1eddi khuy\u00ean ch\u00e2n th\u00e0nh t\u1eeb c\u00e1 nh\u00e2n t\u00f4i v\u00e0o n\u0103m 2022. N\u1ebfu b\u1ea1n mu\u1ed1n th\u00e1ch th\u1ee9c b\u1ea3n th\u00e2n, cu\u1ed1n s\u00e1ch C++ Template Metaprogramming c\u0169ng l\u00e0 m\u1ed9t l\u1ef1a ch\u1ecdn kh\u00e1c m\u00e0 t\u00f4i khuy\u1ebfn ngh\u1ecb b\u1ea1n \u0111\u1ecdc. Tinh th\u1ea7n c\u1ee7a Loki \u0111\u00e3 \u0111\u01b0\u1ee3c h\u1ea5p th\u1ee5 b\u1edfi th\u01b0 vi\u1ec7n chu\u1ea9n hi\u1ec7n \u0111\u1ea1i c\u1ee7a C++ v\u00e0 Boost C++ Libraries, c\u00e1ch tri\u1ec3n khai b\u00ean trong c\u0169ng \u0111\u00e3 l\u1ed7i th\u1eddi, kh\u00f4ng c\u00f2n c\u1ea7n thi\u1ebft \u0111\u1ec3 s\u1eed d\u1ee5ng n\u00f3 n\u1eefa. H\u00e3y t\u00f4n tr\u1ecdng n\u00f3 nh\u01b0 m\u1ed9t hi\u1ec7n v\u1eadt trong b\u1ea3o t\u00e0ng \u0111\u1ec3 m\u1ecdi ng\u01b0\u1eddi ng\u01b0\u1ee1ng m\u1ed9.</p> <p>V\u1ec1 cu\u1ed1n s\u00e1ch C++ Templates: The Complete Guide, t\u01b0\u01a1ng t\u1ef1 nh\u01b0 \u0111\u00e3 \u0111\u1ec1 c\u1eadp, n\u1ebfu b\u1ea1n mu\u1ed1n tr\u1edf th\u00e0nh m\u1ed9t nh\u00e0 thi\u1ebft k\u1ebf th\u01b0 vi\u1ec7n, b\u1ea1n c\u00f3 th\u1ec3 d\u00e0nh th\u1eddi gian \u0111\u1ec3 \u0111\u1ecdc. Tuy nhi\u00ean, n\u1ebfu kh\u00f4ng, b\u1ea1n c\u00f3 th\u1ec3 kh\u00f4ng c\u1ea7n ph\u1ea3i \u0111\u1ecdc. Phi\u00ean b\u1ea3n th\u1ee9 hai c\u1ee7a cu\u1ed1n s\u00e1ch n\u00e0y \u0111\u01b0\u1ee3c xu\u1ea5t b\u1ea3n v\u00e0o n\u0103m 2017, b\u1ea3n d\u1ecbch ti\u1ebfng Trung ra m\u1eaft v\u00e0o n\u0103m 2019, n\u1ed9i dung c\u00f3 th\u1ec3 coi l\u00e0 m\u1edbi. Tuy v\u1eady, vi\u1ec7c b\u1ea1n c\u1ea7n ph\u1ea3i hi\u1ec3u v\u1ec1 template \u0111\u1ebfn m\u1ee9c \u0111\u1ed9 chi ti\u1ebft nh\u01b0 v\u1eady ph\u1ee5 thu\u1ed9c v\u00e0o vi\u1ec7c b\u1ea1n c\u00f3 c\u1ea7n s\u1eed d\u1ee5ng vi\u1ec7c t\u0129nh \u0111a h\u00ecnh thay cho \u0111a h\u00ecnh \u0111\u1ed9ng trong c\u00f4ng vi\u1ec7c c\u1ee7a m\u00ecnh, ho\u1eb7c b\u1ea1n l\u00e0 m\u1ed9t nh\u00e0 thi\u1ebft k\u1ebf th\u01b0 vi\u1ec7n.</p> <p>T\u00f4i kh\u00f4ng ngh\u0129 r\u1eb1ng c\u00f3 b\u1ea5t k\u1ef3 c\u00f4ng ty n\u00e0o \u1edf \u0110\u00e0i Loan s\u1ebd y\u00eau c\u1ea7u nh\u00e2n vi\u00ean d\u00e0nh th\u1eddi gian ph\u00e1t tri\u1ec3n lo\u1ea1i th\u01b0 vi\u1ec7n n\u00e0y. N\u1ebfu c\u00f3, th\u00ec ch\u00fac m\u1eebng b\u1ea1n, s\u1ebfp c\u1ee7a b\u1ea1n c\u00f3 v\u1ebb l\u00e0 m\u1ed9t ng\u01b0\u1eddi c\u00f3 \u0111\u1ea7u \u00f3c. Tuy nhi\u00ean, vi\u1ec7c th\u01b0 vi\u1ec7n n\u00e0y c\u00f3 th\u1ec3 d\u01b0\u1ee3c s\u1eed d\u1ee5ng l\u1ea1i nhi\u1ec1u l\u1ea7n hay kh\u00f4ng l\u1ea1i l\u00e0 m\u1ed9t v\u1ea5n \u0111\u1ec1 kh\u00e1c.</p> <p>Sau khi C++11 ra \u0111\u1eddi, ngu\u1ed3n t\u00e0i nguy\u00ean h\u1ecdc C++ t\u1ea1i \u0110\u00e0i Loan tr\u1edf n\u00ean r\u1ea5t khan hi\u1ebfm, t\u00f4i g\u1ea7n nh\u01b0 kh\u00f4ng th\u1ec3 t\u00ecm th\u1ea5y s\u00e1ch ph\u00f9 h\u1ee3p \u0111\u1ec3 h\u01b0\u1edbng d\u1eabn ng\u01b0\u1eddi kh\u00e1c h\u1ecdc C++, v\u00e0 sau \u0111\u00f3 t\u00f4i c\u0169ng b\u1eaft \u0111\u1ea7u l\u00e0m vi\u1ec7c, kh\u00f4ng c\u00f2n th\u1eddi gian \u0111\u1ec3 d\u1ea1y C++ cho ng\u01b0\u1eddi kh\u00e1c n\u1eefa. Trong th\u1eddi gian h\u1ecdc ti\u1ebfn s\u0129, t\u00f4i \u0111\u00e3 t\u1eadn d\u1ee5ng t\u00e0i nguy\u00ean c\u1ee7a tr\u01b0\u1eddng \u0111\u1ec3 tham gia nhi\u1ec1u kh\u00f3a h\u1ecdc ti\u1ebfng Anh d\u00e0nh cho sinh vi\u00ean cao h\u1ecdc v\u00e0 ti\u1ebfn s\u0129 (c\u1ea3m \u01a1n gi\u00e1o s\u01b0 Ch\u00e2u Hi\u1ec3u Phong c\u1ee7a \u0110\u1ea1i h\u1ecdc Qu\u1ed1c gia Thanh Hoa, ph\u00e2n t\u00edch c\u00e2u v\u0103n kh\u00f3 trong kh\u00f3a h\u1ecdc \u0111\u1ecdc th\u1eadt s\u1ef1 h\u1eefu \u00edch, v\u00e0 kh\u00f3a h\u1ecdc vi\u1ebft ti\u1ebfng Anh khoa h\u1ecdc gi\u00fap t\u00f4i n\u1eafm b\u1eaft c\u1ea5u tr\u00fac c\u1ee7a lu\u1eadn v\u0103n v\u00e0 n\u1eafm b\u1eaft \u0111i\u1ec3m ch\u00ednh c\u1ee7a lu\u1eadn v\u0103n nhanh ch\u00f3ng), c\u0169ng nh\u01b0 tham gia c\u00e1c l\u1edbp h\u1ecdc ti\u1ebfng Anh cho ng\u01b0\u1eddi l\u1edbn ngo\u1ea1i tr\u01b0\u1eddng (c\u1ea3m \u01a1n gi\u00e1o vi\u00ean Otto c\u1ee7a Trung t\u00e2m Ti\u1ebfng Anh Dell \u1edf Hsinchu v\u1ec1 kh\u00f3a h\u1ecdc ng\u1eef ph\u00e1p ti\u00ean ti\u1ebfn v\u00e0 gi\u00e1o vi\u00ean Jeffrey v\u1ec1 kh\u00f3a h\u1ecdc vi\u1ebft TOEFL iBT). T\u00f4i \u0111\u00e3 c\u1ea3i thi\u1ec7n kh\u1ea3 n\u0103ng ti\u1ebfng Anh c\u1ee7a m\u00ecnh t\u1eeb kh\u00e1 y\u1ebfu khi h\u1ecdc ngh\u1ec1, m\u1eb7c d\u00f9 kh\u1ea3 n\u0103ng nghe v\u00e0 n\u00f3i c\u1ee7a t\u00f4i v\u1eabn ch\u01b0a \u0111\u01b0\u1ee3c c\u1ea3i thi\u1ec7n, nh\u01b0ng kh\u1ea3 n\u0103ng \u0111\u1ecdc v\u00e0 vi\u1ebft th\u1ef1c s\u1ef1 \u0111\u00e3 c\u00f3 s\u1ef1 ti\u1ebfn b\u1ed9 \u0111\u00e1ng k\u1ec3. Sau \u0111\u00f3, t\u00f4i b\u1eaft \u0111\u1ea7u mua s\u00e1ch \u0111i\u1ec7n t\u1eed ti\u1ebfng Anh, c\u00e1c ngu\u1ed3n mua ch\u00ednh bao g\u1ed3m InformIT, SpringerLink, Manning, Packt v\u00e0 Leanpub. C\u1ea7n ch\u00fa \u00fd r\u1eb1ng Leanpub c\u00f3 m\u1ed9t s\u1ed1 s\u00e1ch c\u00f3 b\u1ea3n \u0111\u1ecbnh d\u1ea1ng kh\u00f4ng t\u1ed1t, th\u1ef1c s\u1ef1 n\u00f3i, gi\u1ed1ng nh\u01b0 b\u00e1o c\u00e1o c\u1ee7a sinh vi\u00ean \u0111\u1ea1i h\u1ecdc, \u0111\u00f4i khi c\u00f3 th\u1ec3 g\u1eb7p v\u1ea5n \u0111\u1ec1, nh\u01b0ng n\u1ed9i dung v\u1eabn kh\u00f4ng th\u1ec3 coi l\u00e0 kh\u00f4ng c\u00f3 g\u00ec, \u00edt nh\u1ea5t l\u00e0 t\u00f4i ch\u01b0a \u0111\u1ebfn m\u1ee9c mu\u1ed1n \u0111\u01b0a t\u00e1c gi\u1ea3 v\u00e0o danh s\u00e1ch \u0111en. V\u1ec1 ngu\u1ed3n t\u00e0i nguy\u00ean mi\u1ec5n ph\u00ed tr\u00ean m\u1ea1ng, CppCon v\u00e0 BoostCon c\u00f3 l\u1ebd l\u00e0 c\u00e1c ngu\u1ed3n th\u00f4ng tin m\u1edbi nh\u1ea5t m\u00e0 ai c\u0169ng bi\u1ebft, Awesome C++ Weekly c\u0169ng gi\u00fap b\u1ea1n t\u1ef1 \u0111\u1ed9ng hi\u1ec3u bi\u1ebft v\u1ec1 m\u1ed9t s\u1ed1 \u0111i\u1ec1u m\u1edbi, v\u00e0 c\u00f3 nhi\u1ec1u b\u00e0i vi\u1ebft \u0111\u00e1ng ch\u00fa \u00fd m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 theo d\u00f5i qua li\u00ean k\u1ebft tr\u00ean \u0111\u00f3. Ngo\u00e0i ra, t\u00e1c gi\u1ea3 c\u1ee7a cu\u1ed1n s\u00e1ch The Legacy Code Programmer's Toolbox, Jonathan Boccara, c\u0169ng c\u00f3 m\u1ed9t trang web g\u1ecdi l\u00e0 Fluent{C++} c\u0169ng \u0111\u00e1ng \u0111\u1ec3 b\u1ea1n xem qua. T\u1ea5t nhi\u00ean, t\u1ea5t c\u1ea3 nh\u1eefng \u0111i\u1ec1u n\u00e0y \u0111\u1ec1u b\u1eb1ng ti\u1ebfng Anh, v\u00ec v\u1eady cho ng\u01b0\u1eddi sinh ra \u1edf \u0110\u00e0i Loan, vi\u1ec7c n\u1eafm v\u1eefng C++ v\u00e0 theo k\u1ecbp c\u00e1c ti\u00eau chu\u1ea9n m\u1edbi nh\u1ea5t s\u1ebd bi\u1ebfn th\u00e0nh ng\u01b0\u1ee1ng c\u1eeda \u0111\u1ea7u ti\u00ean, m\u1ed9t khi kh\u1ea3 n\u0103ng ti\u1ebfng Anh kh\u00f4ng t\u1ed1t, b\u1ea1n s\u1ebd kh\u00f4ng th\u1ec3 ti\u1ebfp c\u1eadn v\u1edbi C++, \u0111\u00f3 l\u00e0 m\u1ed9t s\u1ef1 th\u1ef1c t\u00e0n nh\u1eabn t\u1eeb n\u0103m 2011 tr\u1edf \u0111i.</p> <p>Trong th\u1eddi \u0111i\u1ec3m n\u0103m 2005, \u0111i\u1ec1u m\u00e0 t\u00f4i kh\u00f4ng \u0111\u1ec1 c\u1eadp l\u00e0 ngo\u00e0i vi\u1ec7c h\u1ecdc t\u1ed1t ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh C++, vi\u1ec7c ph\u00e1t tri\u1ec3n kh\u1ea3 n\u0103ng ph\u00e2n t\u00edch v\u00e0 thi\u1ebft k\u1ebf ch\u01b0\u01a1ng tr\u00ecnh c\u0169ng quan tr\u1ecdng kh\u00f4ng k\u00e9m. M\u1eb7c d\u00f9 h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u00e3 b\u1ecb nhi\u1ec1u ng\u01b0\u1eddi khinh th\u01b0\u1eddng trong th\u1eddi \u0111\u1ea1i hi\u1ec7n \u0111\u1ea1i, v\u00e0 c\u00f3 nhi\u1ec1u h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng m\u1edbi \u0111\u01b0\u1ee3c \u0111\u1ec1 xu\u1ea5t tr\u00ean th\u1ebf gi\u1edbi, b\u1ea3n t\u00ednh c\u00e1 nh\u00e2n c\u1ee7a t\u00f4i v\u1eabn ch\u1ecbu \u1ea3nh h\u01b0\u1edfng s\u00e2u s\u1eafc t\u1eeb Grady Booch, m\u1ed9t trong ba nh\u00e0 l\u00e3nh \u0111\u1ea1o UML, v\u00e0 t\u1eeb OOAD v\u00e0 Unified Process (UP). M\u1eb7c d\u00f9 nh\u1eefng ph\u01b0\u01a1ng ph\u00e1p m\u00e0 \u00f4ng \u0111\u00e3 \u0111\u1ec1 xu\u1ea5t c\u00f3 nhi\u1ec1u \u0111i\u1ec3m c\u1ea7n \u0111\u01b0\u1ee3c \u0111i\u1ec1u ch\u1ec9nh, nh\u01b0ng h\u1ec7 th\u1ed1ng ph\u01b0\u01a1ng ph\u00e1p n\u00e0y v\u1eabn l\u00e0 kh\u00f4ng th\u1ec3 thi\u1ebfu \u0111\u1ed1i v\u1edbi vi\u1ec7c ph\u00e1t tri\u1ec3n ph\u1ea7n m\u1ec1m theo nh\u00f3m. Cu\u1ed1n s\u00e1ch Design Patterns (B\u1ea3n d\u1ecbch) c\u1ee7a b\u1ed9 t\u1ee9 n\u1ed5i ti\u1ebfng n\u0103m 1994 \u0111\u00e3 g\u00e2y ra nhi\u1ec1u t\u00e1c \u0111\u1ed9ng ti\u00eau c\u1ef1c \u0111\u1ed1i v\u1edbi c\u1ea3 nh\u1eefng ng\u01b0\u1eddi trong ng\u00e0nh v\u00e0 sinh vi\u00ean. Kh\u00f4ng th\u1ec3 kh\u00f4ng n\u00f3i r\u1eb1ng n\u00f3 th\u1ef1c s\u1ef1 vi\u1ebft k\u00e9m ch\u1ea5t l\u01b0\u1ee3ng, m\u1eb7c d\u00f9 nh\u1eefng ki\u1ebfn th\u1ee9c m\u00e0 cu\u1ed1n s\u00e1ch mu\u1ed1n truy\u1ec1n \u0111\u1ea1t th\u1ef1c s\u1ef1 l\u00e0 m\u1ed9t \u0111i\u1ec1u t\u1ed1t, nh\u01b0ng l\u1ea1i th\u1ea5t b\u1ea1i \u1edf vi\u1ec7c vi\u1ebft s\u00e1ch.</p> <p>C\u00f4ng ty M\u1ef9 Orielly \u0111\u00e3 b\u1eaft \u0111\u1ea7u xu\u1ea5t b\u1ea3n lo\u1ea1t s\u00e1ch \"Head First\" t\u1eeb n\u0103m 2004, trong \u0111\u00f3 cu\u1ed1n \"Head First Design Patterns\" \u0111\u00e3 gi\u1ea3m \u0111\u00e1ng k\u1ec3 ng\u01b0\u1ee1ng c\u1eeda h\u1ecdc, l\u00e0m cho c\u00e1c m\u1eabu thi\u1ebft k\u1ebf kh\u00f4ng c\u00f2n l\u00e0 n\u1ed7i s\u1ee3 h\u00e3i, nh\u01b0ng c\u0169ng \u0111\u00e3 t\u1ea1o ra nhi\u1ec1u ng\u01b0\u1eddi s\u1eed d\u1ee5ng ch\u00fang m\u00e0 kh\u00f4ng hi\u1ec3u r\u00f5. C\u1ea7n bi\u1ebft r\u1eb1ng theo quy tr\u00ecnh ph\u00e1t tri\u1ec3n h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng truy\u1ec1n th\u1ed1ng, c\u0169ng l\u00e0 ph\u01b0\u01a1ng ph\u00e1p m\u00e0 Grady Booch \u0111\u00e3 \u0111\u1ec1 c\u1eadp trong cu\u1ed1n s\u00e1ch \"The Unified Software Development Process\", vi\u1ec7c ph\u00e2n t\u00edch tr\u01b0\u1edbc khi thi\u1ebft k\u1ebf l\u00e0 c\u1ea7n thi\u1ebft. N\u00f3i m\u1ed9t c\u00e1ch kh\u00e1c, kh\u00f4ng c\u00f3 ph\u00e2n t\u00edch \u0111\u00fang \u0111\u1eafn th\u00ec s\u1ebd kh\u00f4ng c\u00f3 thi\u1ebft k\u1ebf \u0111\u00fang \u0111\u1eafn. C\u00f2n v\u1ec1 c\u00e1c m\u1eabu thi\u1ebft k\u1ebf, th\u1ef1c ch\u1ea5t ch\u00fang ch\u1ec9 l\u00e0 th\u01b0 vi\u1ec7n c\u1ee7a giai \u0111o\u1ea1n thi\u1ebft k\u1ebf. M\u1ed9t ng\u01b0\u1eddi ch\u01b0a t\u1eebng h\u1ecdc v\u1ec1 kh\u00e1i ni\u1ec7m ph\u00e2n t\u00edch v\u00e0 thi\u1ebft k\u1ebf h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng m\u00e0 l\u1ea5y th\u01b0 vi\u1ec7n thi\u1ebft k\u1ebf \u0111\u1ec3 s\u1eed d\u1ee5ng m\u1ed9t c\u00e1ch m\u00f9 qu\u00e1ng, h\u1eadu qu\u1ea3 c\u00f3 th\u1ec3 \u0111o\u00e1n tr\u01b0\u1edbc \u0111\u01b0\u1ee3c.</p> <p>M\u1eb7c d\u00f9 trong ph\u01b0\u01a1ng ph\u00e1p ph\u00e1t tri\u1ec3n hi\u1ec7n \u0111\u1ea1i th\u01b0\u1eddng b\u1ecf qua giai \u0111o\u1ea1n ph\u00e2n t\u00edch, nh\u01b0ng \u0111i\u1ec1u \u0111\u00f3 kh\u00f4ng c\u00f3 ngh\u0129a l\u00e0 qu\u00e1 tr\u00ecnh ph\u00e2n t\u00edch kh\u00f4ng x\u1ea3y ra trong t\u01b0 duy con ng\u01b0\u1eddi. Ch\u00ednh v\u00ec nh\u1eefng ph\u01b0\u01a1ng ph\u00e1p ph\u00e1t tri\u1ec3n c\u1ed5 \u0111i\u1ec3n n\u00e0y \u0111\u00e3 th\u1ea5m s\u00e2u v\u00e0o t\u01b0 duy c\u1ee7a c\u00e1c chuy\u00ean gia, n\u00ean h\u1ecd c\u00f3 th\u1ec3 nhanh ch\u00f3ng \u0111\u01a1n gi\u1ea3n h\u00f3a giai \u0111o\u1ea1n n\u00e0y trong t\u01b0 duy c\u1ee7a m\u00ecnh, b\u1ecf qua c\u00e1c c\u00f4ng vi\u1ec7c t\u00e0i li\u1ec7u ph\u1ee9c t\u1ea1p, \u0111\u01b0a ra k\u1ebft qu\u1ea3 thi\u1ebft k\u1ebf cu\u1ed1i c\u00f9ng, th\u1eadm ch\u00ed l\u00e0 chuy\u1ec3n tr\u1ef1c ti\u1ebfp th\u00e0nh m\u00e3 code. \u0110i\u1ec1u n\u00e0y kh\u00f4ng c\u00f3 ngh\u0129a l\u00e0 qu\u00e1 tr\u00ecnh ph\u00e2n t\u00edch kh\u00f4ng t\u1ed3n t\u1ea1i, ch\u1ec9 l\u00e0 ng\u01b0\u1eddi ngo\u1ea1i \u0111\u1ea1o nh\u00ecn v\u00e0o c\u00f3 v\u1ebb nh\u01b0 v\u1eady.</p> <p>Sau \u0111\u00f3, c\u00f3 l\u1ebd \u0111\u00e3 c\u00f3 ng\u01b0\u1eddi nh\u1eadn ra r\u1eb1ng \u0111i\u1ec1u n\u00e0y kh\u00f4ng \u0111\u00fang, n\u00ean ngay l\u1eadp t\u1ee9c \u0111\u00e3 xu\u1ea5t b\u1ea3n cu\u1ed1n \"Head First Object-Oriented Analysis and Design\", m\u1ed9t ph\u1ea7n n\u00e0o \u0111\u00f3 c\u00f3 th\u1ec3 coi l\u00e0 th\u00e0nh c\u00f4ng trong vi\u1ec7c thay \u0111\u1ed5i t\u00ecnh h\u00ecnh m\u00e0 H\u1ed3 C\u1ea3nh th\u01b0\u1eddng n\u00f3i v\u1ec1 vi\u1ec7c x\u00e2y d\u1ef1ng tr\u00ean c\u00e1t. Tuy nhi\u00ean, v\u00ec c\u00e1c ti\u1ec1n b\u1ed1i trong ng\u00e0nh c\u00f4ng nghi\u1ec7p v\u00e0 c\u00e1c anh ch\u1ecb trong gi\u1edbi h\u1ecdc thu\u1eadt lu\u00f4n t\u00f4n vinh design patterns, n\u00ean cu\u1ed1n s\u00e1ch n\u00e0y kh\u00f4ng nh\u1eadn \u0111\u01b0\u1ee3c s\u1ef1 ch\u00fa \u00fd nh\u01b0 design patterns trong n\u01b0\u1edbc, do \u0111\u00f3, kh\u00f4ng \u00edt ng\u01b0\u1eddi \u0111\u00e3 b\u1eaft \u0111\u1ea7u s\u1eed d\u1ee5ng design patterns m\u00e0 kh\u00f4ng c\u00f3 n\u1ec1n t\u1ea3ng v\u1eefng ch\u1eafc, v\u00e0 b\u1ea3n d\u1ecbch c\u1ee7a cu\u1ed1n s\u00e1ch n\u00e0y \u0111\u00e3 ng\u1eebng xu\u1ea5t b\u1ea3n. Tuy nhi\u00ean, th\u00e0nh th\u1eadt m\u00e0 n\u00f3i, c\u00e1ch ti\u1ebfp c\u1eadn m\u00e0 Orielly gi\u1edbi thi\u1ec7u trong cu\u1ed1n s\u00e1ch c\u0169ng c\u00f3 th\u1ec3 coi l\u00e0 m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p ph\u00e1t tri\u1ec3n nh\u1ea1y b\u00e9n, kh\u00f4ng nh\u01b0 ki\u1ebfn th\u1ee9c n\u1ec1n \u0111\u01b0\u1ee3c gi\u1ea3ng d\u1ea1y trong The Unified Software Development Process, v\u00ec v\u1eady h\u1ea7u h\u1ebft nh\u1eefng ng\u01b0\u1eddi h\u1ecdc OOAD v\u1eabn kh\u00f4ng th\u1ec3 k\u1ebft h\u1ee3p n\u00f3 v\u00e0o quy tr\u00ecnh ph\u00e1t tri\u1ec3n ph\u1ea7n m\u1ec1m m\u1ed9t c\u00e1ch ch\u00ednh x\u00e1c. Nh\u1eefng ng\u01b0\u1eddi n\u00e0y, khi tr\u1edf th\u00e0nh c\u00e1c qu\u1ea3n l\u00fd c\u1ea5p cao, ch\u1ec9 bi\u1ebft s\u1eed d\u1ee5ng ph\u01b0\u01a1ng ph\u00e1p ph\u00e1t tri\u1ec3n n\u1ed5i ti\u1ebfng t\u1eeb Nh\u1eadt B\u1ea3n (b\u1ea3n d\u1ecbch), \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 \"ph\u01b0\u01a1ng ph\u00e1p ph\u00e1t tri\u1ec3n nh\u01b0 sao b\u0103ng\", \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c d\u1ef1 \u00e1n. Vi\u1ec7c s\u1eed d\u1ee5ng ngu\u1ed3n nh\u00e2n l\u1ef1c c\u0169ng g\u1eb7p kh\u00f3 kh\u0103n, m\u1ed9t k\u1ef9 s\u01b0 ph\u1ea3i ch\u1ecbu tr\u00e1ch nhi\u1ec7m cho m\u1ed9t h\u1ec7 th\u1ed1ng l\u1edbn ho\u1eb7c th\u1eadm ch\u00ed l\u00e0 to\u00e0n b\u1ed9 h\u1ec7 th\u1ed1ng ph\u1ea7n m\u1ec1m, kh\u00f4ng th\u1ec3 cho nhi\u1ec1u k\u1ef9 s\u01b0 h\u1ee3p t\u00e1c \u1edf m\u1ee9c \u0111\u1ed9 th\u00e0nh ph\u1ea7n ph\u1ea7n m\u1ec1m \u0111\u1ec3 t\u0103ng c\u01b0\u1eddng hi\u1ec7u su\u1ea5t d\u1ef1 \u00e1n.</p> <p>N\u00f3i c\u00e1ch kh\u00e1c, ngo\u00e0i vi\u1ec7c h\u1ecdc t\u1ed1t ng\u00f4n ng\u1eef C++, b\u1ea1n c\u0169ng c\u1ea7n ph\u1ea3i h\u1ecdc c\u00e1ch ph\u00e1t tri\u1ec3n ph\u1ea7n m\u1ec1m, l\u1eadp k\u1ebf ho\u1ea1ch ki\u1ebfn tr\u00fac ph\u1ea7n m\u1ec1m, th\u1ef1c hi\u1ec7n ph\u00e2n t\u00edch y\u00eau c\u1ea7u, ti\u1ebfn h\u00e0nh ph\u00e2n t\u00edch v\u00e0 thi\u1ebft k\u1ebf h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng, s\u1eed d\u1ee5ng m\u1eabu thi\u1ebft k\u1ebf \u0111\u1ec3 h\u1ed7 tr\u1ee3 c\u00f4ng vi\u1ec7c thi\u1ebft k\u1ebf, v\u00e0 cu\u1ed1i c\u00f9ng l\u00e0 bi\u1ebfn ch\u00fang th\u00e0nh m\u00e3 ngu\u1ed3n s\u1ea1ch s\u1ebd, d\u1ec5 b\u1ea3o tr\u00ec v\u00e0 \u00edt g\u1eb7p l\u1ed7i, th\u1eadm ch\u00ed c\u00f2n s\u1eed d\u1ee5ng c\u00e1c framework ki\u1ec3m th\u1eed \u0111\u1ec3 vi\u1ebft c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh ki\u1ec3m th\u1eed. V\u1ec1 ngu\u1ed3n ki\u1ebfn th\u1ee9c n\u00e0y, b\u1ea1n c\u00f3 th\u1ec3 t\u00ecm th\u1ea5y nhi\u1ec1u s\u00e1ch hay t\u1eeb c\u00e1c nh\u00e0 xu\u1ea5t b\u1ea3n \u0111i\u1ec7n t\u1eed m\u00e0 t\u00f4i \u0111\u00e3 \u0111\u1ec1 c\u1eadp tr\u01b0\u1edbc \u0111\u00f3. M\u00e3 ngu\u1ed3n v\u00ed d\u1ee5 c\u1ee7a h\u1ecd kh\u00f4ng nh\u1ea5t thi\u1ebft \u0111\u01b0\u1ee3c vi\u1ebft b\u1eb1ng C++, c\u00f3 th\u1ec3 l\u00e0 Java ho\u1eb7c th\u1eadm ch\u00ed l\u00e0 Javascript. \u0110i\u1ec1u n\u00e0y b\u1ea1n c\u1ea7n ph\u1ea3i quen thu\u1ed9c, v\u00ec cu\u1ed1n s\u00e1ch kh\u00f4ng truy\u1ec1n \u0111\u1ea1t ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh m\u00e0 ch\u00ednh l\u00e0 ph\u01b0\u01a1ng ph\u00e1p. N\u1ebfu b\u1ea1n c\u1ed1 ch\u1ea5p v\u00e0o m\u1ed9t ng\u00f4n ng\u1eef c\u1ee5 th\u1ec3 m\u00e0 b\u1ecf l\u1ee1 c\u01a1 h\u1ed9i h\u1ecdc nh\u1eefng ki\u1ebfn th\u1ee9c n\u00e0y, t\u00f4i s\u1ebd ngh\u0129 r\u1eb1ng b\u1ea1n kh\u00f4ng ph\u00f9 h\u1ee3p v\u1edbi c\u00f4ng vi\u1ec7c l\u1eadp tr\u00ecnh t\u1eeb \u0111\u1ea7u \u0111\u1ebfn cu\u1ed1i.</p> <p>Trong th\u1ef1c t\u1ebf, tr\u01b0\u1edbc khi r\u1eddi kh\u1ecfi c\u1ed9ng \u0111\u1ed3ng xu\u1ea5t b\u1ea3n t\u1ea1i \u0110\u00e0i Loan, H\u1ed3 C\u1ea3nh c\u0169ng \u0111\u00e3 d\u1ecbch v\u00e0i cu\u1ed1n s\u00e1ch t\u1ed1t, nh\u01b0 \"Refactoring: Improving the Design of Existing Code\" c\u1ee7a Martin Fowler v\u00e0 \"Refactoring to Patterns\" c\u1ee7a Joshua Kerievsky, \u0111\u1ec1u \u0111\u00e1ng \u0111\u1ecdc, tuy ch\u1ec9 \u0111\u1ecdc nh\u1eefng cu\u1ed1n n\u00e0y v\u1eabn c\u00f2n nhi\u1ec1u h\u1ea1n ch\u1ebf. Nh\u1eefng ng\u01b0\u1eddi h\u1ecdc C++ v\u00e0o kho\u1ea3ng n\u0103m 2000 c\u00f3 may m\u1eafn, ch\u1ec9 c\u1ea7n theo d\u00f5i c\u00e1c cu\u1ed1n s\u00e1ch \u0111\u01b0\u1ee3c d\u1ecbch b\u1edfi H\u1ed3 C\u1ea3nh, h\u1ecd s\u1ebd kh\u00f4ng b\u1ecb l\u1ea1c l\u1ed1i nhi\u1ec1u. Ng\u01b0\u1eddi m\u1edbi h\u1ecdc C++ ng\u00e0y nay s\u1ebd g\u1eb7p nhi\u1ec1u kh\u00f3 kh\u0103n h\u01a1n so v\u1edbi th\u1eddi t\u00f4i b\u1eaft \u0111\u1ea7u, v\u1edbi kh\u1ea3 n\u0103ng ti\u1ebfng Anh c\u0169ng tr\u1edf th\u00e0nh m\u1ed9t r\u00e0o c\u1ea3n l\u1edbn trong vi\u1ec7c h\u1ecdc C++. Tuy nhi\u00ean, may m\u1eafn l\u00e0 C++ kh\u00f4ng ph\u1ea3i l\u00e0 ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh ch\u00ednh th\u1ed1ng hi\u1ec7n \u0111\u1ea1i, c\u00f3 nhi\u1ec1u ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh ti\u1ec7n l\u1ee3i v\u00e0 ph\u00f9 h\u1ee3p h\u01a1n \u0111\u1ec3 ph\u00e1t tri\u1ec3n nhanh ch\u00f3ng, v\u00ec v\u1eady t\u00f4i c\u0169ng kh\u00f4ng khuy\u1ebfn kh\u00edch c\u00e1c b\u1ea1n tr\u1ebb ph\u1ea3i b\u01b0\u1edbc v\u00e0o con \u0111\u01b0\u1eddng gai g\u00f3c n\u00e0y.</p> <p>Trong nh\u1eefng n\u0103m g\u1ea7n \u0111\u00e2y, kh\u00f4ng ch\u1ec9 c\u00f3 m\u1ed9t s\u1ed1 ng\u01b0\u1eddi Trung Qu\u1ed1c l\u1ee5c, m\u00e0 c\u00f2n c\u00f3 m\u1ed9t s\u1ed1 ng\u01b0\u1eddi \u0110\u00e0i Loan c\u0169ng b\u1eaft \u0111\u1ea7u th\u00fac \u0111\u1ea9y vi\u1ec7c h\u1ecdc C++ m\u00e0 kh\u00f4ng c\u1ea7n \u0111\u1ecdc qu\u00e1 nhi\u1ec1u s\u00e1ch. C\u00e1 nh\u00e2n t\u00f4i ch\u1ec9 c\u00f3 th\u1ec3 \u0111\u1ed3ng \u00fd m\u1ed9t ph\u1ea7n, v\u00ec m\u1ed9t s\u1ed1 quan \u0111i\u1ec3m c\u1ee7a m\u1ed9t s\u1ed1 ng\u01b0\u1eddi qu\u00e1 c\u1ef1c \u0111oan, th\u1eadm ch\u00ed cho r\u1eb1ng kh\u00f4ng c\u1ea7n \u0111\u1ecdc c\u00e1c cu\u1ed1n s\u00e1ch trong lo\u1ea1t \"Effective\". Tuy nhi\u00ean, v\u00ec nh\u1eefng t\u00e1c ph\u1ea9m v\u0129 \u0111\u1ea1i trong qu\u00e1 kh\u1ee9 kh\u00f4ng \u0111\u01b0\u1ee3c c\u1eadp nh\u1eadt, v\u00e0 hi\u1ec7n nay kh\u00f4ng c\u00f3 nh\u1eefng cu\u1ed1n s\u00e1ch n\u00e0o c\u00f3 th\u1ec3 s\u00e1nh k\u1ecbp v\u1edbi nh\u1eefng t\u00e1c ph\u1ea9m \u0111\u00f3, n\u00ean t\u00f4i c\u0169ng kh\u00f4ng mu\u1ed1n tranh lu\u1eadn v\u1edbi h\u1ecd. Trong n\u0103m 2022, vi\u1ec7c thi\u1ebfu c\u00e1c t\u00e1c ph\u1ea9m v\u0129 \u0111\u1ea1i \u0111\u00f3 trong c\u1ed9ng \u0111\u1ed3ng C++ th\u1ef1c s\u1ef1 l\u00e0 m\u1ed9t \u0111i\u1ec1u kh\u00f4ng may m\u1eafn cho c\u1ea3 c\u1ed9ng \u0111\u1ed3ng n\u00e0y. Ngay t\u1eeb nh\u1eefng ng\u00e0y \u0111\u1ea7u, c\u00e1c c\u01a1 ch\u1ebf ng\u00f4n ng\u1eef C++ \u0111\u00e3 cung c\u1ea5p cho con ng\u01b0\u1eddi c\u00e1c kh\u1ed1i x\u00e2y d\u1ef1ng d\u1ec5 d\u00e0ng b\u1ecb ph\u00e2n r\u00e3, v\u00ec v\u1eady c\u00f3 nh\u1eefng t\u00e1c ph\u1ea9m v\u0129 \u0111\u1ea1i \u0111\u00f3 \u0111\u1ec3 ng\u0103n ch\u1eb7n con ng\u01b0\u1eddi t\u00e1i ph\u1ea1m nh\u1eefng l\u1ed7i m\u00e0 c\u00e1c ti\u1ec1n b\u1ed1i \u0111\u00e3 ph\u1ea1m. Sau C++11 v\u00e0 C++20, C++ l\u1ea1i c\u00f3 nhi\u1ec1u kh\u1ed1i x\u00e2y d\u1ef1ng m\u1edbi, nh\u01b0ng nh\u1eefng ng\u01b0\u1eddi m\u1edbi trong c\u1ed9ng \u0111\u1ed3ng l\u1ea1i thi\u1ebfu nh\u1eefng t\u00e1c ph\u1ea9m v\u0129 \u0111\u1ea1i \u0111\u00f3 \u0111\u1ec3 nh\u1eafc nh\u1edf h\u1ecd, d\u00f9 l\u00e0 nh\u1eefng ng\u01b0\u1eddi th\u00e0nh th\u1ea1o C++98 c\u0169ng c\u00f3 th\u1ec3 g\u1eb7p kh\u00f3 kh\u0103n khi s\u1eed d\u1ee5ng C++17 v\u00e0 t\u00e1i ph\u1ea1m nh\u1eefng l\u1ed7i \u0111\u00e3 t\u1eebng m\u1eafc ph\u1ea3i. \u0110\u1ed1i m\u1eb7t v\u1edbi t\u00ecnh h\u00ecnh nh\u01b0 v\u1eady, t\u00f4i ch\u1ec9 c\u00f3 th\u1ec3 g\u1eadt \u0111\u1ea7u v\u00e0 ch\u1edd \u0111\u1ee3i xem li\u1ec7u ng\u00e0nh xu\u1ea5t b\u1ea3n c\u00f3 th\u1ec3 c\u00f3 m\u1ed9t c\u1ee9u tinh nh\u01b0 Scott Meyers hay kh\u00f4ng.</p>"},{"location":"CMake/cmake_01_hello_world/","title":"CMake - \"Hello world\"","text":""},{"location":"CMake/cmake_01_hello_world/#definition-from-wikipedia","title":"Definition from Wikipedia","text":"<p>In software development, CMake is cross-platform free and open-source software for build automation, testing, packaging and installation of software by using a compiler-independent method.</p> <p>So, clearly, CMake is not a build system but rather it generates another system's build files.</p>"},{"location":"CMake/cmake_01_hello_world/#source-code","title":"Source code","text":"<p>Lets have a simple mainapp.cpp that will flush to output the string \"Hello world!\"</p> mainapp.cpp<pre><code>#include&lt;stdio.h&gt;\u200b\n// ----------------------------------\u200b\n// Greeting message in English\u200b\n// ----------------------------------\u200b\nvoid  greeting_en()\u200b\n{\u200b\n    printf(\"Hello world!\\n\");\u200b\n}\u200b      \u200b\n// ----------------------------------\u200b\n// Main functions\u200b\n// ----------------------------------\u200b\nint  main(int  argc, char* argv[])\u200b\n{\u200b\n    greeting_en();\u200b\n    return 0;\u200b\n}\n</code></pre>"},{"location":"CMake/cmake_01_hello_world/#cmakelists","title":"CMakeLists","text":"<p>CMakeLists.txt that is put in the same level with mainapp.cpp with content:</p> CMakeLists.txt<pre><code># -------------------------------------------\u200b\n# The minimum version that required to be able to read this CMakeList.txt\u200b\n# -------------------------------------------\u200b\ncmake_minimum_required(VERSION 2.8.12)\u200b\n\u200b\n# -------------------------------------------\u200b\n# Project name often named as the binary (executable) file\u200b\n# -------------------------------------------\u200b\nproject(helloworld)\u200b\n\u200b\n# -------------------------------------------\u200b\n# Define the relationship between the the source code and the binary file\u200b\n# -------------------------------------------\u200b\nadd_executable(helloworld mainapp.cpp)\n</code></pre> <p>Putting the two files into the same directory, the hierarchy file can be seen by command tree as</p> <pre><code>root@ubuntu-22:/home/henry/HENRY_LAB/How_to_write_CMake/cmake_practice_01_single_source_code# tree\n.\n\u251c\u2500\u2500 CMakeLists.txt\n\u2514\u2500\u2500 mainapp.cpp\n</code></pre> <p>The file CMakeList.txt acts like a definition that CMake could understand, here we goes into the project before running the following command:</p> <pre><code>[root@base06 cmake_practice_01_single_source_code]# cmake .\u200b\n</code></pre> <p>Note: The dot \".\" is very important, it is the navigator to the path that store the file CMakeList.txt. In this case we can change it to $(PWD), the result should be the same.\u200b</p>"},{"location":"CMake/cmake_01_hello_world/#build-the-code","title":"Build the code","text":"<pre><code>root@ubuntu-22:/home/henry/HENRY_LAB/How_to_write_CMake/cmake_practice_01_single_source_code# cmake .\n-- The C compiler identification is GNU 11.2.0\n-- The CXX compiler identification is GNU 11.2.0\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Check for working C compiler: /usr/bin/cc - skipped\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working CXX compiler: /usr/bin/c++ - skipped\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/henry/HENRY_LAB/How_to_write_CMake/cmake_practice_01_single_source_code\n</code></pre> <p>As we can see, there are many files and folder created during the running of CMake. In this tutorial, we only focus on the Makefile  created</p> <p>Observe:\u200b</p> <ul> <li>CMake's duty is helping to generate Makefile, in other words, it is NOT helping us to build the project but to generate the Makefile  only and then . . . done!\u200b</li> <li>As Wikipedia defines, CMake is NOT a build system.</li> </ul> <p>So now, to build the project, we invoke Makefiles with command make\u200b\u200b</p> <pre><code>root@ubuntu-22:/home/henry/HENRY_LAB/How_to_write_CMake/cmake_practice_01_single_source_code# make\n[ 50%] Building CXX object CMakeFiles/helloworld.dir/mainapp.cpp.o\n[100%] Linking CXX executable helloworld\n[100%] Built target helloworld\n</code></pre> <p>The result will be an executable file named helloworld  as below\u200b</p> <pre><code>root@ubuntu-22:/home/henry/HENRY_LAB/How_to_write_CMake/cmake_practice_01_single_source_code# ls -la\ntotal 64\ndrwxrwxr-x  3 henry henry  4096  \u516b  31 21:56 .\ndrwxrwxr-x 10 henry henry  4096  \u516b  31 20:49 ..\n-rw-r--r--  1 root  root  14018  \u516b  31 21:50 CMakeCache.txt\ndrwxr-xr-x  5 root  root   4096  \u516b  31 21:56 CMakeFiles\n-rw-r--r--  1 root  root   1724  \u516b  31 21:50 cmake_install.cmake\n-rw-rw-r--  1 henry henry   583  \u516d   9 10:13 CMakeLists.txt\n-rwxr-xr-x  1 root  root  16000  \u516b  31 21:56 helloworld\n-rw-rw-r--  1 henry henry   351  \u516d   9 10:08 mainapp.cpp\n-rw-r--r--  1 root  root   5467  \u516b  31 21:50 Makefile\n</code></pre>"},{"location":"CMake/cmake_01_hello_world/#enjoy-the-result","title":"Enjoy the result","text":"<p>Execute the file, we see the expected result:\u200b</p> <pre><code>root@ubuntu-22:/home/henry/HENRY_LAB/How_to_write_CMake/cmake_practice_01_single_source_code# ./helloworld\nHello world!\n</code></pre> <p>Source code can be found here</p>"},{"location":"CMake/cmake_02_separated_build_folder/","title":"Separate build files and source code","text":""},{"location":"CMake/cmake_02_separated_build_folder/#scenario","title":"Scenario","text":"<p>After build the code, build files and its sub-files is in mixing. How to separate them to different directories?\u200b</p>"},{"location":"CMake/cmake_02_separated_build_folder/#result","title":"Result","text":"<p>Separated build files and source code</p>"},{"location":"CMake/cmake_02_separated_build_folder/#lets-firstly-look-at-the-source-code","title":"Lets firstly look at the source code","text":"<pre><code>$ tree\n.\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 build\n\u251c\u2500\u2500 include\n\u2502   \u251c\u2500\u2500 greetings_chinese.h\n\u2502   \u251c\u2500\u2500 greetings_english.h\n\u2502   \u2514\u2500\u2500 greetings_vietnamese.h\n\u2514\u2500\u2500 source\n    \u251c\u2500\u2500 greetings_chinese.cpp\n    \u251c\u2500\u2500 greetings_english.cpp\n    \u251c\u2500\u2500 greetings_vietnamese.cpp\n    \u2514\u2500\u2500 mainapp.cpp\n</code></pre> mainapp.cpp<pre><code>#include&lt;stdio.h&gt;\u200b\n#include&lt;greetings_english.h&gt;\u200b\n#include&lt;greetings_chinese.h&gt;\u200b\n#include&lt;greetings_vietnamese.h&gt;\u200b\n//\u200b\n// Main functions\u200b\n//\u200b\nint  main(int argc, char * argv[])\u200b\n{\u200b\n    greeting_en();\u200b\n    greeting_cn();\u200b\n    greeting_vi();\u200b\n    return 0;\u200b\n}\n</code></pre>"},{"location":"CMake/cmake_02_separated_build_folder/#header-files","title":"Header files","text":"greetings_english.h<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid  greeting_en();\u200b\n</code></pre> greetings_chinese.h<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid  greeting_cn();\u200b\n</code></pre> greetings_vietnamese.h<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid  greeting_vi();\u200b\n</code></pre>"},{"location":"CMake/cmake_02_separated_build_folder/#source-files","title":"Source files","text":"greetings_english.cpp<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid greeting_en()\u200b\n{\u200b\n    printf(\"Hello!\\n\");\u200b\n}\u200b\u200b\n</code></pre> greetings_chinese.cpp<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid greeting_cn()\u200b\n{\u200b\n    printf(\"Nihao!\\n\");\u200b\n}\u200b\n</code></pre> greetings_vietnamese.cpp<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid greeting_vi()\u200b\n{\u200b\n    printf(\"Xin chao!\\n\");\u200b\n}\u200b\n</code></pre>"},{"location":"CMake/cmake_02_separated_build_folder/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code># ------------------------------------------- \u200b\n# The minimum version that required to be able to read this CMakeList.txt \u200b\n# ------------------------------------------- \u200b\n\ncmake_minimum_required(VERSION 2.8.12)\u200b\n# ------------------------------------------- \u200b\n# Project name often named as the binary (executable) file \u200b\n# ------------------------------------------- \u200b\nproject(helloworld)\u200b\n# ------------------------------------- \u200b\n# declare the directories that store project's file headers (.h) \u200b\n# ------------------------------------- \u200b\n\ninclude_directories(include)\u200b\n# -------------------------------------\u200b\n# adding source code file with command *set* \u200b\n# ------------------------------------- \u200b\n# set(SOURCES source/mainapp.cpp source/greetings_english.cpp source/greetings_chinese.cpp source/greetings_vietnamese.cpp)\u200b\n# ------------------------------------- \u200b\n# An alternative to set() is file(), this method is a good practice and \u200b\n# time-saving and also more common among developer community \u200b\n# And also, it support glob * \u200b\n# ------------------------------------- \u200b\nfile(GLOB SOURCES \"source/*.cpp\")\u200b\n# ------------------------------------------- \u200b\n# Define the relationship between the the source code and the binary file \u200b\n# ------------------------------------------- \u200b\nadd_executable(helloworld ${SOURCES}) \u200b\n</code></pre>"},{"location":"CMake/cmake_02_separated_build_folder/#build","title":"Build","text":"<p>\u200bWe change the directory to build folder and run the command cmake ..\u200b Double dot \"..\" means the upper layer that store the CMakeList.txt</p> <pre><code>[root@base06 build]# cmake ..\u200b\n-- The C compiler identification is GNU 4.8.5\u200b\n-- The CXX compiler identification is GNU 4.8.5\u200b\n- Check for working C compiler: /usr/bin/cc\u200b\n-- Check for working C compiler: /usr/bin/cc -- works\u200b\n-- Detecting C compiler ABI info\u200b\n-- Detecting C compiler ABI info - done\u200b\n-- Check for working CXX compiler: /usr/bin/c++\u200b\n-- Check for working CXX compiler: /usr/bin/c++ -- works\u200b\n-- Detecting CXX compiler ABI info\u200b\n-- Detecting CXX compiler ABI info - done\u200b\n-- Configuring done\u200b\n-- Generating done\u200b\n-- Build files have been written to: /home/henryle/CMake_Practice/cmake_practice_02_separated_build/build\u200b\n</code></pre> <p>Compiling procedure is quite like CMake \"Hello World\"</p> <p>Observe the file tree again</p> <pre><code>root@Henry-Legion5:/cmake_practice_02_separated_build# tree -L 2\n.\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 build\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CMakeCache.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CMakeFiles\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Makefile\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 cmake_install.cmake\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 greetings_chinese.h\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 greetings_english.h\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 greetings_vietnamese.h\n\u2514\u2500\u2500 source\n    \u251c\u2500\u2500 greetings_chinese.cpp\n    \u251c\u2500\u2500 greetings_english.cpp\n    \u251c\u2500\u2500 greetings_vietnamese.cpp\n    \u2514\u2500\u2500 mainapp.cpp\n</code></pre> <p>Run the Makefile in folder build\u200b</p> <pre><code>root@Henry-Legion5:/cmake_practice_02_separated_build/build# make\nScanning dependencies of target helloworld\n[ 20%] Building CXX object CMakeFiles/helloworld.dir/source/greetings_chinese.cpp.o\n[ 40%] Building CXX object CMakeFiles/helloworld.dir/source/greetings_english.cpp.o\n[ 60%] Building CXX object CMakeFiles/helloworld.dir/source/greetings_vietnamese.cpp.o\n[ 80%] Building CXX object CMakeFiles/helloworld.dir/source/mainapp.cpp.o\n[100%] Linking CXX executable helloworld\n[100%] Built target helloworld\n</code></pre> <p>Double check the file tree, we see the executable/binary file helloworld is generated in build folder\u200b</p> <pre><code>root@Henry-Legion5:/mnt/d/PROJECTS/How_to_write_CMake/cmake_practice_02_separated_build# tree -L 2\n.\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 build\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CMakeCache.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CMakeFiles\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Makefile\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cmake_install.cmake\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 helloworld\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 greetings_chinese.h\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 greetings_english.h\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 greetings_vietnamese.h\n\u2514\u2500\u2500 source\n    \u251c\u2500\u2500 greetings_chinese.cpp\n    \u251c\u2500\u2500 greetings_english.cpp\n    \u251c\u2500\u2500 greetings_vietnamese.cpp\n    \u2514\u2500\u2500 mainapp.cpp\n</code></pre> <p>Execute the file helloworld, we see the expected result\u200b</p> <pre><code>root@Henry-Legion5:/cmake_practice_02_separated_build/build# ./helloworld\nHello!\nNihao!\nXin chao!\n</code></pre> <p>Source code can be found here</p>"},{"location":"CMake/cmake_03_build_a_shared_library_with_CMake/","title":"Export \"Hello World\" as a shared library (.so)","text":""},{"location":"CMake/cmake_03_build_a_shared_library_with_CMake/#scenario","title":"Scenario:\u200b","text":"<p>We want \"hello world\" is exported as a library to other project's usage\u200b</p>"},{"location":"CMake/cmake_03_build_a_shared_library_with_CMake/#result","title":"Result:\u200b","text":"<p>Using CMake to export the \"hello world\" project to 2 types of library, dynamic library and static lirary</p>"},{"location":"CMake/cmake_03_build_a_shared_library_with_CMake/#source-tree","title":"Source tree","text":"<p>Lets firstly have a look at what we have for the source tree. The files structure is similar to the previous post.</p> <pre><code>[root@base06 cmake_practice_03_project_to_lib_so]# tree\n.\n\u251c\u2500\u2500 build\u200b\n\u251c\u2500\u2500 CMakeLists.txt\u200b\n\u251c\u2500\u2500 include\u200b\n\u2502   \u251c\u2500\u2500 greetings_chinese.h\u200b\n\u2502   \u251c\u2500\u2500 greetings_english.h\u200b\n\u2502   \u2514\u2500\u2500 greetings_vietnamese.h\u200b\n\u2514\u2500\u2500 source\u200b\n    \u251c\u2500\u2500 greetings_chinese.cpp\u200b\n    \u251c\u2500\u2500 greetings_english.cpp\u200b\n    \u2514\u2500\u2500 greetings_vietnamese.cpp\n</code></pre> <p>Content of the each file is as follow</p>"},{"location":"CMake/cmake_03_build_a_shared_library_with_CMake/#header-files","title":"Header files","text":"<p>The same as previous post</p> greetings_english.h<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid  greeting_en();\u200b\n</code></pre> greetings_chinese.h<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid  greeting_cn();\u200b\n</code></pre> greetings_vietnamese.h<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid  greeting_vi();\u200b\n</code></pre>"},{"location":"CMake/cmake_03_build_a_shared_library_with_CMake/#source-files","title":"Source files","text":"<p>The same as previous post</p> greetings_english.cpp<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid greeting_en()\u200b\n{\u200b\n    printf(\"Hello!\\n\");\u200b\n}\n</code></pre> greetings_english.cpp<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid greeting_cn()\u200b\n{\u200b\n    printf(\"Nihao!\\n\");\u200b\n}\n</code></pre> greetings_english.cpp<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid greeting_vi()\u200b\n{\u200b\n    printf(\"Xin chao!\\n\");\u200b\n}\u200b\n</code></pre>"},{"location":"CMake/cmake_03_build_a_shared_library_with_CMake/#cmakeliststxt","title":"CMakeLists.txt","text":"<p>There is not much different from the post to the previous, but only we do not have main() function in any source files because we are building a library.</p>"},{"location":"CMake/cmake_03_build_a_shared_library_with_CMake/#cmakeliststxt_1","title":"CMakeLists.txt","text":"<p>CMakeLists.txt for generating .so library\u200b</p> <pre><code># -------------------------------------------\u200b\n# The minimum version that required to be able to read this CMakeList.txt\u200b\n# -------------------------------------------\u200b\ncmake_minimum_required(VERSION 2.8.12)\u200b\n# -------------------------------------------\u200b\n# Project name often named as the binary (executable) file\u200b\n# -------------------------------------------\u200b\nproject (multilang_greetings)\u200b\n# -------------------------------------\u200b\n# declare the directories that store project's file headers (.h)\u200b\n# -------------------------------------\u200b\ninclude_directories(include)\u200b\n# -------------------------------------\u200b\n# Adding the needed source files\u200b\n# -------------------------------------\u200b\nfile(GLOB SOURCES \"source/*.cpp\")\u200b\n# -------------------------------------------\u200b\n# Define which source files are include into the library\u200b\n# Type of the library is SHARED\u200b\n# name of the library can be differed from project name\u200b\n# -------------------------------------------\u200b\nadd_library(greetings_encnvi SHARED ${SOURCES})\n</code></pre> <p>Note:\u200b</p> <p>A dynamic library or a share object is shared between processes in system at runtime. CMake uses SHARED keyword in add_library() to indicate the type of library that will be generated.</p>"},{"location":"CMake/cmake_03_build_a_shared_library_with_CMake/#build","title":"Build","text":"<p>Run CMake and is as the same as previous post</p> <p>\u200bWe change the directory to build folder and run the command cmake ..\u200b \u200b After build the project, the .so library is the file that we expect as the result.\u200b</p> <pre><code>[root@ cmake_practice_03_project_to_lib_so]# tree -L 2\u200b\n.\u200b\n\u251c\u2500\u2500 build\u200b\n\u2502   \u251c\u2500\u2500 CMakeCache.txt\u200b\n\u2502   \u251c\u2500\u2500 CMakeFiles\u200b\n\u2502   \u251c\u2500\u2500 cmake_install.cmake\u200b\n\u2502   \u251c\u2500\u2500 libgreetings_encnvi.so\u200b\n\u2502   \u2514\u2500\u2500 Makefile\u200b\n\u251c\u2500\u2500 CMakeLists.txt\u200b\n\u251c\u2500\u2500 include\u200b\n\u2502   \u251c\u2500\u2500 greetings_chinese.h\u200b\n\u2502   \u251c\u2500\u2500 greetings_english.h\u200b\n\u2502   \u2514\u2500\u2500 greetings_vietnamese.h\u200b\n\u2514\u2500\u2500 source\u200b\n    \u251c\u2500\u2500 greetings_chinese.cpp\u200b\n    \u251c\u2500\u2500 greetings_english.cpp\u200b\n    \u2514\u2500\u2500 greetings_vietnamese.cpp\u200b\n</code></pre> <p>\u200bThe file libgreetings_encnvi.so\u200b is generated in build</p>"},{"location":"CMake/cmake_03_build_a_shared_library_with_CMake/#checking-the-library-with-ldd","title":"Checking the library with ldd","text":"<p>To double check the linking inside the library, we can run the command ldd as below</p> <pre><code>[root@base06 build]# ldd libgreetings_encnvi.so\u200b\n        linux-vdso.so.1 =&gt;  (0x00007ffc957c4000)\u200b\n        libstdc++.so.6 =&gt; /lib64/libstdc++.so.6 (0x00007f8f33d2f000)\u200b\n        libm.so.6 =&gt; /lib64/libm.so.6 (0x00007f8f33a2d000)\u200b\n        libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f8f33449000)\u200b\n        /lib64/ld-linux-x86-64.so.2 (0x00007f8f34239000)\u200b\n</code></pre>"},{"location":"CMake/cmake_03_build_a_shared_library_with_CMake/#conlusion","title":"Conlusion","text":"<p>We have going through all the steps to have the library build project, as the result is the library that built with the linking is checked.</p> <p>Source code can be found HERE</p>"},{"location":"CMake/cmake_04_build_a_static_library_with_CMake/","title":"Export \"Hello World\" as a static library (.a)","text":"<p>The procedure to build static library is similar to build shared (dynamic) library as the previous post. But the only difference is CMakeLists.txt for generating .a library</p>"},{"location":"CMake/cmake_04_build_a_static_library_with_CMake/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code># -------------------------------------------\u200b\n# The minimum version that required to be able to read this CMakeList.txt\u200b\n# -------------------------------------------\u200b\ncmake_minimum_required(VERSION 2.8.12)\u200b\n# -------------------------------------------\u200b\n# Project name often named as the binary (executable) file\u200b\n# -------------------------------------------\u200b\nproject (multilang_greetings)\u200b\n# -------------------------------------\u200b\n# declare the directories that store project's file headers (.h)\u200b\n# -------------------------------------\u200b\ninclude_directories(include)\u200b\n# -------------------------------------\u200b\n# Adding the needed source files\u200b\n# -------------------------------------\u200b\nfile(GLOB SOURCES \"source/*.cpp\")\u200b\n# -------------------------------------------\u200b\n# Define which source files are include into the library\u200b\n# Type of the library is STATIC\u200b\n# name of the library can be differed from project name\u200b\n# -------------------------------------------\u200b\nadd_library(greetings_encnvi STATIC ${SOURCES})\n</code></pre> <p>Note:\u200b</p> <p>Static library is defined in CMake by using STATIC keyword in add_library() to indicate the type of library that will be generated.</p> <p>Compare to generating .so library, generating .a file is not much different. The result is a .a library\u200b</p> <pre><code>[root@cmake_practice_03_project_to_lib_a]# tree -L 2\u200b\n.\u200b\n\u251c\u2500\u2500 build\u200b\n\u2502   \u251c\u2500\u2500 CMakeCache.txt\u200b\n\u2502   \u251c\u2500\u2500 CMakeFiles\u200b\n\u2502   \u251c\u2500\u2500 cmake_install.cmake\u200b\n\u2502   \u251c\u2500\u2500 libgreetings_encnvi.a\u200b\n\u2502   \u2514\u2500\u2500 Makefile\u200b\n\u251c\u2500\u2500 CMakeLists.txt\u200b\n\u251c\u2500\u2500 include\u200b\n\u2502   \u251c\u2500\u2500 greetings_chinese.h\u200b\n\u2502   \u251c\u2500\u2500 greetings_english.h\u200b\n\u2502   \u2514\u2500\u2500 greetings_vietnamese.h\u200b\n\u2514\u2500\u2500 source\u200b\n    \u251c\u2500\u2500 greetings_chinese.cpp\u200b\n    \u251c\u2500\u2500 greetings_english.cpp\u200b\n    \u2514\u2500\u2500 greetings_vietnamese.cpp\u200b\n</code></pre>"},{"location":"CMake/cmake_04_build_a_static_library_with_CMake/#checking-the-library-content","title":"Checking the library content","text":"<p>\u200b To double check the linking inside the library, we can run the command ar \u2013t as below\u200b</p> <pre><code>[root@build]# ar -t libgreetings_encnvi.a\u200b\ngreetings_vietnamese.cpp.o\u200b\ngreetings_english.cpp.o\u200b\ngreetings_chinese.cpp.o\n</code></pre> <p>Source code can be found HERE</p>"},{"location":"CMake/cmake_05_include_a_library_with_CMake/","title":"Include \"Hello World\" as library","text":""},{"location":"CMake/cmake_05_include_a_library_with_CMake/#scenario","title":"Scenario:\u200b","text":"<ul> <li> <p>At this point, we already has our own library, in both dynamic and static types.\u200b</p> </li> <li> <p>So, how to import the libs into our project using CMake\u200b \u200b</p> </li> </ul>"},{"location":"CMake/cmake_05_include_a_library_with_CMake/#result","title":"Result:\u200b","text":"<ul> <li>Using CMake to import the \"hello world\" project into our project and build an executable/binary file with the Makefile generated.</li> </ul>"},{"location":"CMake/cmake_05_include_a_library_with_CMake/#source-tree","title":"Source tree","text":"<p>Lets firstly have a look at what we have for the source tree.</p> <pre><code># tree\u200b\n.\u200b\n\u251c\u2500\u2500 build\u200b\n\u251c\u2500\u2500 CMakeLists.txt\u200b\n\u251c\u2500\u2500 include\u200b\n\u2502   \u251c\u2500\u2500 greetings_chinese.h\u200b\n\u2502   \u251c\u2500\u2500 greetings_english.h\u200b\n\u2502   \u251c\u2500\u2500 greetings_spanish.h\u200b\n\u2502   \u2514\u2500\u2500 greetings_vietnamese.h\u200b\n\u251c\u2500\u2500 lib\u200b\n\u2502   \u2514\u2500\u2500 libgreetings_encnvi.so\u200b\n\u2514\u2500\u2500 source\u200b\n    \u251c\u2500\u2500 greetings_spanish.cpp\u200b\n    \u2514\u2500\u2500 mainapp.cpp\n</code></pre>"},{"location":"CMake/cmake_05_include_a_library_with_CMake/#source-code","title":"Source code","text":"<p>Content of the each file is as follow</p> mainapp.cpp<pre><code>#include&lt;stdio.h&gt;\u200b\n#include&lt;greetings_english.h&gt;\u200b\n#include&lt;greetings_chinese.h&gt;\u200b\n#include&lt;greetings_vietnamese.h&gt;\u200b\n#include&lt;greetings_spanish.h&gt;\u200b\nint main(int argc, char * argv[])\u200b\n{\u200b\n    greeting_en();\u200b\n    greeting_cn();\u200b\n    greeting_vi();\u200b\n    greeting_es();\u200b\n    return 0;\u200b\n}\u200b\n</code></pre> greetings_english.h<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid greeting_en();\u200b\n</code></pre> greetings_chinese.h<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid greeting_cn();\u200b\n</code></pre> greetings_vietnamese.h<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid greeting_vi();\u200b\n</code></pre> greetings_spanish.h<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid greeting_es();\u200b\n</code></pre> greetings_spanish.h<pre><code>#include&lt;stdio.h&gt;\u200b\nvoid greeting_es()\u200b\n{\u200b\n    printf(\"Voila!\\n\");\u200b\n}\u200b\n</code></pre>"},{"location":"CMake/cmake_05_include_a_library_with_CMake/#cmakeliststxt-for-so-library","title":"CMakeLists.txt for .so library","text":"<p>CMakeLists.txt for generating Makefile with .so library\u200b</p> <pre><code># -------------------------------------------\u200b\n# The minimum version that required to be able to read this CMakeList.txt\u200b\n# -------------------------------------------\u200b\ncmake_minimum_required(VERSION 2.8.12)\u200b\n# -------------------------------------------\u200b\n# Project name often named as the binary (executable) file\u200b\n# -------------------------------------------\u200b\nproject (multilang_greetings)\u200b\n# -------------------------------------\u200b\n# declare the directories that store the library (.so)\u200b\n# -------------------------------------\u200b\nset (PROJECT_LINK_LIBS libgreetings_encnvi.so)\u200b\nlink_directories(lib)\u200b\n# -------------------------------------\u200b\n# declare the directories that store project's file headers (.h)\u200b\n# -------------------------------------\u200b\ninclude_directories(include)\u200b\n# -------------------------------------\u200b\n# Adding the needed source files\u200b\n# -------------------------------------\u200b\nfile(GLOB SOURCES \"source/*.cpp\")\u200b\n# -------------------------------------------\u200b\n# Define the relationship between the the source code and the binary file\u200b\n# -------------------------------------------\u200b\nadd_executable(helloworld_in_4lang ${SOURCES})\u200b\n# -------------------------------------------\u200b\n# Needed library is declared via PROJECT_LINK_LIBS\u200b\n# -------------------------------------------\u200b\ntarget_link_libraries(helloworld_in_4lang ${PROJECT_LINK_LIBS})\u200b\n</code></pre> <p>Note:\u200b</p> <ul> <li> <p>Compare to Know how 2, there is no library added to the project, in this case, we only need to declare in the CMakefile.txt the library that we use\u200b</p> </li> <li> <p>And the link between the build file and the library.</p> </li> </ul>"},{"location":"CMake/cmake_05_include_a_library_with_CMake/#build-project","title":"Build Project","text":"<p>We navigate to build folder, type cmake .. and make as usual:\u200b</p> <p>[root@base06 cmake_practice_04_include_so_lib_to_project]# cd build/\u200b</p> <pre><code>[root@base06 build]# cmake ..\u200b\n-- The C compiler identification is GNU 4.8.5\u200b\n-- The CXX compiler identification is GNU 4.8.5\u200b\n-- Check for working C compiler: /usr/bin/cc\u200b\n-- Check for working C compiler: /usr/bin/cc -- works\u200b\n-- Detecting C compiler ABI info\u200b\n-- Detecting C compiler ABI info - done\u200b\n-- Check for working CXX compiler: /usr/bin/c++\u200b\n-- Check for working CXX compiler: /usr/bin/c++ -- works\u200b\n-- Detecting CXX compiler ABI info\u200b\n-- Detecting CXX compiler ABI info - done\u200b\n-- Configuring done\u200b\n-- Generating done\u200b\n-- Build files have been written to: /home/henryle/CMake_Practice/cmake_practice_04_include_so_lib_to_project/build\u200b\n</code></pre> <pre><code>[root@base06 build]# make\u200b\nScanning dependencies of target helloworld_in_4lang\u200b\n[ 50%] Building CXX object CMakeFiles/helloworld_in_4lang.dir/source/greetings_spanish.cpp.o\u200b\n[100%] Building CXX object CMakeFiles/helloworld_in_4lang.dir/source/mainapp.cpp.o\u200b\nLinking CXX executable helloworld_in_4lang\u200b\n[100%] Built target helloworld_in_4lang\u200b\n</code></pre>"},{"location":"CMake/cmake_05_include_a_library_with_CMake/#execute","title":"Execute","text":"<p>Execute the binary file, and checking the result\u200b</p> <pre><code>[root@base06 build]# ./helloworld_in_4lang\u200b\nHello!\u200b\nNihao!\u200b\nXin chao!\u200b\nVoila!\u200b\n</code></pre>"},{"location":"CMake/cmake_05_include_a_library_with_CMake/#static-a-to-project","title":"Static .a to project","text":"<p>Note:\u200b</p> <p>There is not much different when include a .so and but replacing the .a library to the project.\u200b</p> <pre><code>[root@base06 cmake_practice_04_include_a_lib_to_project]# tree\u200b\n.\u200b\n\u251c\u2500\u2500 build\u200b\n\u251c\u2500\u2500 CMakeLists.txt\u200b\n\u251c\u2500\u2500 include\u200b\n\u2502   \u251c\u2500\u2500 greetings_chinese.h\u200b\n\u2502   \u251c\u2500\u2500 greetings_english.h\u200b\n\u2502   \u251c\u2500\u2500 greetings_spanish.h\u200b\n\u2502   \u2514\u2500\u2500 greetings_vietnamese.h\u200b\n\u251c\u2500\u2500 lib\u200b\n\u2502   \u2514\u2500\u2500 libgreetings_encnvi.a\u200b\n\u2514\u2500\u2500 source\u200b\n    \u251c\u2500\u2500 greetings_spanish.cpp\u200b\n    \u2514\u2500\u2500 mainapp.cpp\u200b\n</code></pre>"},{"location":"CMake/cmake_05_include_a_library_with_CMake/#cmakeliststxt-for-a-library","title":"CMakeLists.txt for .a library","text":"<p>CMakeLists.txt for generating Makefile with .a library\u200b</p> CMakeLists.txt<pre><code># -------------------------------------------\u200b\n# The minimum version that required to be able to read this CMakeList.txt\u200b\n# -------------------------------------------\u200b\ncmake_minimum_required(VERSION 2.8.12)\u200b\n# -------------------------------------------\u200b\n# Project name often named as the binary (executable) file\u200b\n# -------------------------------------------\u200b\nproject (multilang_greetings)\u200b\n# -------------------------------------\u200b\n# declare the directories that store the library (.so)\u200b\n# -------------------------------------\u200b\nset (PROJECT_LINK_LIBS libgreetings_encnvi.a)\u200b\nlink_directories(lib)\u200b\n# -------------------------------------\u200b\n# declare the directories that store project's file headers (.h)\u200b\n# -------------------------------------\u200b\ninclude_directories(include)\u200b\n# -------------------------------------\u200b\n# Adding the needed source files\u200b\n# -------------------------------------\u200b\nfile(GLOB SOURCES \"source/*.cpp\")\u200b\n# -------------------------------------------\u200b\n# Define the relationship between the the source code and the binary file\u200b\n# -------------------------------------------\u200b\nadd_executable(helloworld_in_4lang ${SOURCES})\u200b\n# -------------------------------------------\u200b\n# Needed library is declared via PROJECT_LINK_LIBS\u200b\n# -------------------------------------------\u200b\ntarget_link_libraries(helloworld_in_4lang ${PROJECT_LINK_LIBS})\u200b\n</code></pre> <p>Note:\u200b</p> <ul> <li> <p>In this case, we only need to declare in the CMakefile.txt the library that we use\u200b</p> </li> <li> <p>And the link between the build file and the library.\u200b</p> </li> <li> <p>To build binary file, the operation is absolute just like including with .so lib\u200b</p> </li> </ul> <p>Source code can be found HERE</p>"},{"location":"CMake/cmake_extra01_functions_explanation/","title":"CMake functions: some explanation","text":"<pre><code>make_minimum_required(VERSION 3.10)\n</code></pre> <p>cmake_minimum_required() : the minimum version that CMake needs to be so that the CMakeLists.txt can be read. Check version of CMake in the system by cmake --version</p> <pre><code>project(Tutorial VERSION 1.0)\n</code></pre> <p>project() : giving the name to the project, version of a project can be modified here</p> <pre><code>set(CMAKE_CXX_STANDARD 11) set(CMAKE_CXX_STANDARD_REQUIRED True)\n</code></pre> <p>set(): some kind of configuration or setting a variable, with CMake</p> <pre><code>option(USE_MYMATH \"use tutorial provided math implementataion\" ON)\n</code></pre> <p>option(): declare options for Dev/User to be able to change build options quickly, for example, different os or use different APIs depending on the environment</p> <pre><code>configure_file([TutorialConfig.h.in](http://tutorialconfig.h.in/) TutorialConfig.h)\n</code></pre> <p>configure_file() : pass environment variables from outside the code into the code, for example, VERSION 1.0 from project(), passed as @Tutorial_VERSION_MAJOR@ \u2192 via macro and header pass the value to Tutorial_VERSION_MAJOR inside the code, after build and run, you will see the Version magically appear</p> <p>add_subdirectory() : this command to add a folder during the build process to find a library</p> <p>list(APPEND a_variable): append a variable to a list, useful when adding a bundle of sourcecode to build a targer</p> <pre><code>add_executable(Tutorial tutorial.cxx)\n</code></pre> <p>add_executable() : Simply understand it as a way to declare the relationship between the binary named Tutorial and the related source files</p> <pre><code>target_link_libraries(Tutorial PUBLIC ${EXTRA_LIBS})\n</code></pre> <p>target_link_libraries(): declare the target that is called this Tutorial that needs the libs in list of libs in EXTRA_LIBS.</p> <pre><code>target_include_directories(Tutorial PUBLIC \"${PROJECT_BINARY_DIR}\" ${EXTRA_INCLUDES} )\n</code></pre> <p>target_include_directories() : Similar to the above, this command to declare which directories are relevant (containing some libs).</p>"},{"location":"IoTStack/IoTStack01_InstallationOnGCP/","title":"How to install IOTStack on Ubuntu and monitor all containers with Portainer.io","text":"<p>\"Hackers rarely have full knowledge of the technology stack of a target.\" - John McAfee</p> <p>Written by Henry Le on Oct 29, 2021</p> <p>As I recently start projects on the term and found that open-source community already built a very completed stack that can do almost everything one can imagine to do with IoT. So this article I would like to share how can IoTStack be installed on Ubuntu. I tested the process on both Google Cloud Platform and my local server, so I believe that this instruction works just fine with anyone else have interests in start to have fun with IOTStack.</p> <p>If you already have a RPI4 with you, the instruction of Andreas Spiess is a must-read.</p> <p>Firstly, making sure you already have everything packages updated and upgrades with:</p> <pre><code>sudo apt update\nsudo apt upgrade -y\n</code></pre> <p>And also curl if you are not sure that the package is already installed</p> <pre><code>sudo apt install curl\n</code></pre> <p>After having curl on your system, run the following command.</p> <pre><code>curl -fsSL https://raw.githubusercontent.com/SensorsIot/IOTstack/master/install.sh | bash\n</code></pre> <p>As default, a directory call /IOTStack will be created as your /home directory</p> <p></p> <p>As you may see, there are two script file, install.sh and menu.sh, install.sh is indeed the script file we curl from the link above. By invokinng install.sh, another directory tree of IOTStack will then created and the content will be cloned just as the same as the parent folder we see here.</p> <p>Now, its time to see what we have in menu</p> <pre><code>cd ~\ncd /IOTStack\n./menu.sh\n</code></pre> <p></p> <p>Using your arrow keys to navigate around the menu, Build Stack is the first place we need to visit</p> <p>If you install IOTStack on a completely clean OS, without even docker installed, IOTStack will help you install the needed docker version.</p> <p></p> <p>If everything is running properly, a menu will be shown</p> <p></p> <p>Navigating aroung by arrow keys and choosing the docker images by typing space bar. In my case, I choose grafana, influxdb, mosquitto, nodered, portainer-ce, portainer-agent, postgres, tasmoadmin and wireguard.</p> <p>At this point, you finished choosing your stack, assuming this is the first time you install IOTStack, there are no images or containers running in you system yet. The next step is making eveything up and running.</p> <p>Choosing the second option in the menu.</p> <p></p> <p>There are several useful options in the Docker Commands menu, in this article I simply choosing Start Stack. The very first time building IOTStack might take a while because there are no existing images stored in your system yet. So for the first time, images of chosen option from the previous step will be automatically pulling to your system and then make it running.</p> <p>So far so good, the Stack after built up will look just as below, if there are any errors occur, error message will let you know while building up the stack.</p> <p></p> <p>To check whether the docker images was pulled to your system, enter the following command</p> <pre><code>docker images\n</code></pre> <p>To check the running containers</p> <pre><code>docker ps -a\n</code></pre>"},{"location":"IoTStack/IoTStack01_InstallationOnGCP/#monitoring-all-built-container-with-portainerio","title":"Monitoring all built container with portainer.io","text":"<p>If you try docker ps -a, by default you will see the container of portainer-ce is running with the IP exposed to outside. The port 9000 by default, is for administrators logging to the management webpage.</p> <p></p> <p>On your Web Browser (ie. Chrome, Firefox, etc). Enter localhost:9000/, this will open up the Web GUI of portainer-ce.</p> <p></p> <p>You will need to secure your admin account's password the first time you logging to the Portainer. After logging in, the existing images and running containers are all shown up for your monitoring. Portainer provides various command buttons so that you can easily manipulate the Stack to certain levels.</p> <p></p> <p>Basically, there are all the steps you need to operate when dealing with IOTStack for the first time, the result may different from time to time since the project IOTStack is actively updated by its contributors. By using the well prepared docker images of IOTStack, we save a lot of time from dealing with configuration. The heavy-lifting part is done for you so you can have more time spending on your business logic rather hours of configurating without knowing that they can work stably together.</p> <p>Thank you for reading my clumsy article, for more real life projects about IOTStack you can refer to this Link.</p>"},{"location":"LevelDB/leveldb_01_hello_world/","title":"An example of using levelDB","text":""},{"location":"LevelDB/leveldb_01_hello_world/#target","title":"Target:\u200b","text":"<ul> <li>In this post, I will explain how to write a simple program that can utilize the API that provide by levelDB</li> </ul>"},{"location":"LevelDB/leveldb_01_hello_world/#some-facts","title":"Some facts:","text":"<ul> <li>LevelDB is a database that embedded into the process rathen running independently just as Postgresql or MongoDB.</li> <li>The data that is stored in levelDB is straightforward, that simply pairs of KV, Key and Value.</li> <li>LeveDB support a set of API so users can call, and there not too many of commands that we can call here.</li> </ul>"},{"location":"LevelDB/leveldb_01_hello_world/#lets-see-with-source-tree","title":"Lets see with source tree:","text":"<p>Here we have a single source code that include the header leveldb/db.h</p> <pre><code>root@Henry-WIN:leveldb_practice# tree\n.\n\u2514\u2500\u2500 leveldb_example.cpp\n</code></pre>"},{"location":"LevelDB/leveldb_01_hello_world/#source-code","title":"Source code","text":"<p>Content of the file is as follow</p> <p>leveldb_example.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;assert.h&gt;\n#include &lt;unistd.h&gt;\n#include \"leveldb/db.h\"\n\nusing namespace std;\n\n// build the code with $ g++ -o leveldb_example leveldb_example.cpp -lleveldb\nint main (void)\n{\n    leveldb::DB *db;\n    leveldb::Options options;\n\n    options.create_if_missing = true;\n    //open\n    leveldb::Status status = leveldb::DB::Open(options, \"/tmp/testdb\", &amp;db);\n    assert(status.ok());\n\n    string key = \"name\";\n    string value = \"HenryLe\";\n\n    // write - PUT\n    status = db-&gt;Put(leveldb::WriteOptions(), key, value);\n    assert(status.ok());\n    cout &lt;&lt; \"=== Write K:[\" &lt;&lt; key &lt;&lt; \"] V:[\" &lt;&lt; value &lt;&lt; \"] to DB\"  &lt;&lt; endl;\n\n    // read - GET\n    status = db-&gt;Get(leveldb::ReadOptions(), key, &amp;value);\n    assert(status.ok());\n    cout &lt;&lt; \"=== Read K:[\"  &lt;&lt; key &lt;&lt; \"] V:[\" &lt;&lt; value &lt;&lt; \"] from DB\" &lt;&lt; endl;\n\n    // delete - DELETE\n    status = db-&gt;Delete(leveldb::WriteOptions(), key);\n    assert(status.ok());\n\n    status = db-&gt;Get(leveldb::ReadOptions(), key, &amp;value);\n    if (!status.ok())\n    {\n        cerr &lt;&lt; \"=== Failed to read kv after deletion: [\" &lt;&lt; key &lt;&lt; \"] Status: \" &lt;&lt; status.ToString()  &lt;&lt; endl;\n    }\n    else\n    {\n        cout &lt;&lt; key &lt;&lt; \"===\" &lt;&lt; value &lt;&lt; endl;\n    }\n    // usleep(20000000);\n\n    // close\n    delete db;\n\n    return 0;\n}\n</code></pre> The flow of the code is as follow:</p> <ul> <li>We open the database with leveldb::DB::Open()</li> <li>We write/put data to the database, in this case a pair of Key|Value -- name|Henry</li> <li>We read/get the data from the database to see if the data is written to database properly</li> <li>We delete the data</li> <li>And finally, we read the data again and see the confirmation that the data is deleted</li> </ul>"},{"location":"LevelDB/leveldb_01_hello_world/#build-the-program","title":"Build the program","text":"<p>To build the program, we type the command below</p> <pre><code>$ g++ -o leveldb_example leveldb_example.cpp -lleveldb\u200b\n</code></pre> <p>Note:\u200b</p> <ul> <li> <p>To successfully build the program, the system need to installed leveldb. Otherwise, the compiling will fail due to lack of library that need for the build.</p> </li> <li> <p>To install levelDB, refer to Google/leveldb</p> </li> </ul>"},{"location":"LevelDB/leveldb_01_hello_world/#execute","title":"Execute","text":"<p>After compile the program, in your source will have the compiled/binary file as beloy:</p> <pre><code>root@Henry-WIN:leveldb_practice# tree\n.\n\u251c\u2500\u2500 leveldb_example\n\u2514\u2500\u2500 leveldb_example.cpp\n</code></pre> <p>Now, lets run the program to see the result:</p> <pre><code>root@Henry-WIN:leveldb_practice# ./leveldb_example\n=== Write K:[name] V:[HenryLe] to DB\n=== Read K:[name] V:[HenryLe] from DB\n=== Failed to read kv after deletion: [name] Status: NotFound:\n</code></pre> <p>The data the content Key|Value name|Henry is written to database. Then read from database, then deleted, and after deleted, we read the data and receive warning that the data is not found in the database. All work as expected.</p> <p>This short tutorial is a note so that I can refer later to when I need it.</p> <p>Source code can be found HERE</p>"},{"location":"LifeInTaiwan/2023%20Year-end%20dinner%20party%20%F0%9F%8E%8A%20668e90ad017c4059a9aa4390be485c92/","title":"2023 Year-end dinner party \ud83c\udf8a","text":"<p>As we wind down the year, I find myself reflecting on some quirks of our workplace culture at LatticeWorkInc. For the past three years, we've skipped our annual shindig, leaving us all feeling a bit disconnected. But hey, it's given me a chance to think back on my own journey here as a software engineer.</p> <p>You know, it's funny how our team is the only one that has to give a weekly report directly to the big boss, Pantas Sutardja. At first, it felt like added pressure, but now it's just part of the routine\u2014a chance to catch up and learn a thing or two.</p> <p>One big lesson I've picked up from these weekly powwows is that progress isn't about huge leaps; it's about small, consistent improvements every day. Mr. Sutardja's been drilling that into us since day one, and you know what? It works. I've seen it in my own work, how starting small and staying consistent pays off in the long run.</p> <p>Looking back, sure, we've missed out on some year-end fun, but these weekly check-ins have taught me a lot about perseverance and the power of steady progress. So here's to keeping at it, learning from the routine, and seeing where the journey takes us next.</p> <p>Cheers to progress and the everyday grind of engineering life!</p> <p></p>"}]}